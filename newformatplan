# Multi-Stage Conversational AI Integration Plan

**Phase I: Setup & Core Data Structures (Client-Side & Shared)**

- [x] **1. Define `elementDefaults.ts` (or equivalent configuration):**
    - [x] **Step 1.1:** Create the file `src/config/elementDefaults.ts` (then moved to `supabase/functions/_shared/types/config/elementDefaults.ts`).
    - [x] **Step 1.2:** Inside `elementDefaults.ts`, import necessary types.
    - [x] **Step 1.3:** In `elementDefaults.ts`, define and export `elementDefaults` constant.
    - [x] **Step 1.4:** Populate `elementDefaults` for all `ElementTypeV2`.
    - [x] **Step 1.5:** In `elementDefaults.ts`, define and export `createNewElement` function.
    - [x] **Step 1.6:** Ensure `elementDefaults.ts` is accessible to the Generation AI Supabase Edge Function.

- [x] **2. Update State Management (`src/pages/Editor.tsx` or relevant state file):**
    - [x] **Step 2.1:** Define TypeScript interface `ClarificationMessage` (in `src/types/ai.ts`).
    - [x] **Step 2.2:** In `Editor.tsx`, add state variables: `clarificationConversation`, `isClarifying`, `clarificationContext`.
    - [x] **Step 2.3:** Plan refactoring of `handleSendMessage` to orchestrate the multi-stage AI interaction.

**Phase II: Backend - Clarification AI Service**

- [/] **3. Create New Supabase Edge Function (e.g., `clarify-user-intent`):**
    - [x] **Step 3.1:** Create the Edge Function file (`supabase/functions/clarify-user-intent/index.ts`).
    - [x] **Step 3.2:** Define input parameters (`ClarifyUserIntentPayload` interface).
    - [/] **Step 3.3:** Implement core logic:
        - [x] Select Clarification AI model (placeholder defined).
        - [/] Construct system prompt: Detailed structure created; V2 type info appended. TODO: Fully construct messages array for AI by integrating context variables (`mainChatHistory`, `currentSemanticEmailV2`, `ongoingClarificationContext`).
        - [/] Invoke AI model: `fetch` structure for OpenAI API call added. Still using simplified messages for AI and returning simulated responses. TODO: Use fully constructed messages, process real AI JSON response, implement robust parsing & validation of AI output.
        - [ ] Parse and validate AI's JSON response (Robust parsing/validation of live AI response is TODO).
    - [x] **Step 3.4:** Define exact output JSON structure (`QuestionResponse`, `CompleteResponse` interfaces defined).

**Phase III: Frontend - Integrating Clarification Flow**

- [ ] **4. Enhance `ChatInterface` Component (e.g., `@/components/ChatInterface.tsx`):**
    - [ ] **Step 4.1:** Render messages from `clarificationConversation` state.
    - [ ] **Step 4.2:** If `suggestions` present, render as clickable buttons.
    - [ ] **Step 4.3:** `onClick` for suggestion buttons: add value to `clarificationConversation`, trigger `handleSendMessage`.
    - [ ] **Step 4.4:** Consider UI/UX to distinguish main chat from clarification sub-flow.

- [ ] **5. Update `handleSendMessage` in `Editor.tsx` (Orchestration Logic):**
    - [ ] **Step 5.1 (Initiate Clarification):** Implement logic to call `clarify-user-intent` when `isClarifying` is false.
    - [ ] **Step 5.2 (Process `clarify-user-intent` Response):** Implement logic to handle `requires_clarification` (update context, show question) and `complete` (store `perfectPrompt`/`elementsToProcess`, call Generation AI) statuses.
    - [ ] **Step 5.3 (Loading States):** Implement and manage `isLoading` UI feedback across stages.

**Phase IV: Backend - Generation AI Service (Modifying `generate-email-changes` Edge Function)**

- [ ] **6. Modify `generate-email-changes` Supabase Edge Function:**
    - [ ] **Step 6.1:** Update inputs: `perfectPrompt`, `elementsToProcess`, `currentSemanticEmailV2`, `projectId`.
    - [ ] **Step 6.2:** Implement core logic:
        - [ ] Construct Generation AI system prompt (instruct to use `perfectPrompt`, `elementsToProcess`, `elementDefaults.ts`).
        - [ ] Detail `elementsToProcess` handling ('add', 'modify', 'delete') using `elementDefaults`.
        - [ ] Invoke Generation AI.
        - [ ] Parse and **validate** `EmailTemplateV2` JSON from AI.
        - [ ] (Recommended) Diff new vs. current `EmailTemplateV2`.
        - [ ] Update DB.
    - [ ] **Step 6.3:** Define output: `newSemanticEmail`, `newHtml`, `newPendingChanges`, `aiExplanation`.

**Phase V: Frontend - Consuming Generation Result**

- [ ] **7. `handleSendMessage` (Continued in `Editor.tsx`):**
    - [ ] **Step 7.1:** After clarification 'complete', call modified `generate-email-changes`.
    - [ ] **Step 7.2 (Process Response):** Update `projectData`, `pendingChanges`, `chatMessages`, refresh UI.

**Phase VI: Iteration, Testing & Refinements**

- [ ] **8. Thorough Testing and UX Refinement:**
    - [ ] **Step 8.1:** Test clarification flow with diverse prompts. Evaluate AI question/suggestion quality.
    - [ ] **Step 8.2:** Test Clarification AI's completion logic and context use.
    - [ ] **Step 8.3:** Test generation flow: `elementDefaults.ts` use, actions, `userPreferences`, `perfectPrompt` guidance.
    - [ ] **Step 8.4:** Evaluate and iterate on clarification UX.
    - [ ] **Step 8.5:** Monitor and optimize AI call performance.
    - [ ] **Step 8.6:** Implement comprehensive error handling and user feedback.
