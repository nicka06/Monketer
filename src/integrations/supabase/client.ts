
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://nvlkyadiqucpjjgnhujm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52bGt5YWRpcXVjcGpqZ25odWptIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5MDAwNTcsImV4cCI6MjA2MTQ3NjA1N30.LJVCnNj46h9ogGY0g1OYSfJevBgulcTtUvEqs2fdZTw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
});

// Enhanced global error handler for Supabase
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Supabase auth event:', event);
  if (event === 'SIGNED_OUT') {
    console.log('User signed out, redirecting to login...');
    // Redirect will happen through router guards
  } else if (event === 'SIGNED_IN') {
    console.log('User signed in successfully');
  } else if (event === 'TOKEN_REFRESHED') {
    console.log('Auth token refreshed successfully');
  } else if (event === 'USER_UPDATED') {
    console.log('User profile updated');
  }
});

// Helper for catching and logging Supabase errors
export const handleSupabaseError = (error: any) => {
  console.error('Supabase error:', error);
  
  if (error?.code === '403' || error?.code === '42501') {
    console.error('Permission denied error. This may be due to Row Level Security (RLS) policies.');
    // Check if user is still authenticated
    supabase.auth.getSession().then(({ data }) => {
      if (!data.session) {
        console.error('User session not found. Please log in again.');
      } else {
        console.log('User is authenticated but lacks permission for this operation.');
        // Automatically refresh token if authenticated but still getting permission errors
        supabase.auth.refreshSession();
      }
    });
  } else if (error?.code === '401') {
    console.error('Authentication error. Token may have expired.');
    // Try to refresh the token
    supabase.auth.refreshSession();
  } else if (error?.code === '23505') {
    console.error('Unique constraint violation. This record already exists.');
  } else if (error?.code === '23503') {
    console.error('Foreign key constraint violation. Referenced record does not exist.');
  } else if (error?.message?.includes('invalid input syntax for type uuid')) {
    console.error('Invalid UUID format. Check your identifiers for correct formatting.', error);
  }
  
  return error;
};

// Helper type for safely converting complex types to Json
export type JsonValue = string | number | boolean | null | { [key: string]: JsonValue } | JsonValue[];

// Helper function to safely convert any object to Supabase-compatible Json type
export function toJson<T>(data: T): JsonValue {
  // Clean up any potential malformed UUIDs in the data
  const cleaned = JSON.parse(JSON.stringify(data));
  if (cleaned && typeof cleaned === 'object' && cleaned.id && typeof cleaned.id === 'string') {
    // Fix malformed UUIDs (remove spaces and trailing numbers)
    cleaned.id = cleaned.id.trim().split(' ')[0];
  }
  return cleaned;
}

// Helper function to fix malformed UUIDs
export function cleanUuid(id: string): string {
  if (!id) return id;
  // Remove any spaces and trailing numbers after the UUID
  return id.trim().split(' ')[0];
}
