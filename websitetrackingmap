## Website Tracking Feature Implementation Map

**Overall Goal:** To allow Emailore users to install a tracking pixel (JavaScript snippet) on their websites. This pixel will send page view data and custom events to Emailore's backend, enabling future features like event-triggered email automations.

---

### Phase 1: Core Tracking Implementation (for Developer-Owned Custom Websites)

This phase focuses on providing a developer with a unique tracking script, instructions for manual installation on a custom website, a way to test the installation, and the backend infrastructure to receive and store basic tracking data.

**1. Frontend - `src/pages/WebsiteTrackingPage.tsx`**

   *   **Purpose:** Guide the user through obtaining their tracking script, understanding how to install it, and testing its functionality.
   *   **Details:**
       *   **A. Fetch User/Setup Specific Identifier:**
           *   - [x] Retrieve `email_setup_id` for the authenticated user (from `useAuth` and then fetching `email_setups`). This ID is crucial for associating tracked events with the correct user account.
       *   **B. Generate Unique Tracking Script:**
           *   - [x] Create a template for the JavaScript tracking snippet.
           *   - [x] Dynamically insert the user's `email_setup_id` into this script template.
           *   - [x] Define the backend `endpoint` URL for the `ingest-tracking-event` function within the script.
           *   **Script Functionality (Initial Version):**
               *   - [x] Immediately send an `emailore_pixel_loaded` event upon script load.
               *   - [x] Include basic information like `url: window.location.href`, `status: 'loaded'`, `version: '1.0.0'`.
               *   - [x] Use `navigator.sendBeacon` if available for reliable data transmission, with a `fetch` fallback.
               *   - [x] Expose a global function `window.emailore.track(eventName, eventData)` for later custom event tracking.
       *   **C. Display Tracking Script to User:**
           *   - [x] Present the generated script within a read-only `<textarea>` or a styled code block component.
           *   - [x] Include a "Copy Script to Clipboard" button.
       *   **D. Installation Instructions (Generic for Developers):**
           *   - [x] Provide clear text instructions: "For custom-built websites, paste this script into the `<head>` section of your website's HTML. Ensure it is included on all pages where you want to track activity. This is typically done by adding it to a global header include file or the main layout template."
       *   **E. Installation for Website Platforms (e.g., Shopify, WordPress):**
           *   - [x] "Using a website platform like Shopify, WordPress, Wix, Squarespace, Webflow, etc.?" (Placeholder text added)
           *   - [x] "We are working on dedicated Emailore Pixel apps/plugins for popular platforms to make installation even easier." (Placeholder text added)
           *   - [x] "**How to find them (once available):**" (Placeholder text added)
           *       - [x] "    - **Shopify:** Search for 'Emailore Pixel' in the Shopify App Store." (Placeholder text added)
           *       - [x] "    - **WordPress:** Search for 'Emailore Pixel' in the WordPress Plugin Directory." (Placeholder text added)
           *       - [x] "    - **Other Platforms:** Check your platform's app marketplace or integration settings for an Emailore app." (Placeholder text added)
           *   - [x] "If an app is not yet available for your platform, you may still be able to use the manual installation method above if your platform allows adding custom code to the `<head>` or `<body>` of your site. Please check your platform's documentation." (Placeholder text added)
           *   - [x] "(Note: Platform-specific apps are under development. This section will be updated with direct links as they become available.)" (Placeholder text added)
       *   **F. Pixel Installation Testing Mechanism:**
           *   **UI Elements:**
               *   - [x] "Test My Pixel Installation" button.
               *   - [x] A status display area (e.g., "Status: Not yet tested", "Status: Waiting for data...", "Status: Success! Last event received: Page View on [URL] at [Time]").
           *   **Logic (`handleTestPixel` function):**
               *   - [x] When the button is clicked, call a new Supabase Edge Function (`test-pixel-status`) via an authenticated request, passing the `email_setup_id`.
               *   - [x] Update the status display based on the function's response.
               *   - [x] Provide guidance if no data is received (e.g., "No data received. Please ensure the script is correctly installed on your live website, visit a page, and try testing again in a few moments.").
       *   **G. Navigation:**
           *   - [x] "Previous Step" button (to `/dns-confirmation` or relevant previous step).
           *   - [x] "Next Step" / "Continue" button (e.g., to `/subscription-plan` or dashboard if this is the last onboarding step). This button should likely be enabled even if the pixel test hasn't been successful, perhaps with a note.

**2. Backend - Supabase Edge Functions**

   *   **A. `ingest-tracking-event` Function:**
       *   - [x] **Location:** `src/backend/functions/ingest-tracking-event/index.ts` (File created with initial logic, needs deployment and full testing)
       *   - [x] **Purpose:** Receive tracking data sent by the user's website pixel.
       *   - [x] **Trigger:** HTTP POST request.
       *   - [~] **CORS:** Must be configured to accept requests from `*` (any origin) or allow users to specify their domain for security. Handle OPTIONS preflight requests. (Initial code in place, needs verification in deployment).
       *   - [x] **Input (Request Body):** JSON object (schema defined below, reflecting actual pixel script payload)
           ```json
           {
             "email_setup_id": "USER_UNIQUE_EMAIL_SETUP_ID",
             "event_name": "event_name_here",
             "event_data": { /* custom data */ },
             "page_url": "https://users-website.com/product-page",
             "client_timestamp": "YYYY-MM-DDTHH:mm:ss.sssZ"
           }
           ```
       *   **Logic:**
           *   - [~] 1. Parse the JSON payload. (Initial code in place)
           *   - [~] 2. Validate the `email_setup_id` (e.g., check if it exists in `email_setups`). If invalid, return an error (e.g., 400 or 401). (Basic validation in place, RLS handles some aspects).
           *   - [ ] 3. Extract other relevant information from request headers if desired (e.g., `User-Agent`, `CF-Connecting-IP` if behind Cloudflare - be mindful of privacy implications and GDPR if collecting IP).
           *   - [~] 4. Insert the event data into the `tracked_events` database table. (Initial code in place)
           *   - [~] 5. Return a lightweight success response (e.g., `204 No Content` or `200 OK` with a minimal body). (Initial code in place)
   *   **B. `test-pixel-status` Function:**
       *   - [x] **Location:** `src/backend/functions/test-pixel-status/index.ts`
       *   - [x] **Purpose:** Check if any tracking data has been recently received for a given user, to help them verify pixel installation.
       *   - [x] **Trigger:** HTTP POST (or GET) request from Emailore frontend (authenticated).
       *   - [x] **CORS:** Standard CORS for Emailore frontend.
       *   - [x] **Authentication:** Requires authenticated user context (to ensure a user can only test their own setup).
       *   - [x] **Input (Request Body/Query Params):** `{ "emailSetupId": "USER_UNIQUE_EMAIL_SETUP_ID" }`
       *   **Logic:**
           *   - [x] 1. Verify that the authenticated user owns the provided `emailSetupId`. (Handled by Supabase auth context)
           *   - [x] 2. Query the `tracked_events` table for records matching `email_setup_id`.
           *   - [x] 3. Filter for events received within a recent timeframe (e.g., last 10-15 minutes).
           *   - [x] 4. Order by `received_at` descending and take the latest event.
       *   - [x] **Output (Response Body):** JSON object (matches success/pending/error structure)

**3. Database - Supabase Table**

   *   - [x] **Table Name:** `tracked_events` (Table created with SQL script)
   *   - [x] **Purpose:** Store all incoming page view and custom event data from user websites.
   *   **Columns:**
       *   - [x] `id`: `uuid` (Primary Key, default `gen_random_uuid()`)
       *   - [x] `email_setup_id`: `uuid` (Foreign Key referencing `email_setups.id`, indexed)
       *   - [x] `event_name`: `text` (e.g., "page_view", "add_to_cart", "form_submission_contact")
       *   - [x] `event_data`: `jsonb` (Flexible field for any custom properties associated with the event, e.g., `{"product_id": "123", "category": "shoes"}`)
       *   - [x] `page_url`: `text` (The URL where the event occurred)
       *   - [x] `client_timestamp`: `timestamp with time zone` (Timestamp generated by the client-side script)
       *   - [x] `received_at`: `timestamp with time zone` (Server-side timestamp, default `now()`, indexed)
       *   - [x] `user_agent`: `text` (Optional, from request headers) - *Currently not implemented in ingest function*
       *   - [x] `ip_address`: `inet` (Optional, from request headers) - *Currently not implemented in ingest function*
   *   **RLS Policies:**
       *   - [x] `ingest-tracking-event` function will use `service_role_key` to write to this table. (Policy created)
       *   - [x] Users should only be able to read events related to their `email_setup_id` (via the `test-pixel-status` function, which queries as admin, or if direct user queries are ever allowed). (Policy created)

---

### Phase 2: Advanced Event Tracking (Developer Focused)

This phase builds on the core tracking by enabling developers to send more specific, custom events.

**1. Custom Event Tracking via `window.emailore.track()`**

   *   **Frontend - `src/pages/WebsiteTrackingPage.tsx` (Documentation Aspect):**
       *   - [~] Add a section explaining how developers can send custom events using the globally available `window.emailore.track(eventName, eventData)` function from their website's JavaScript. (Basic mention exists, needs expansion with examples as per map).
       *   **Example Usage (to be added to page):**
           ```javascript
           // Track when a user signs up for a newsletter
           window.emailore.track('newsletter_signup', { form_location: 'footer' });

           // Track when a video is played
           myVideoPlayer.on('play', function() {
             window.emailore.track('video_play', { video_title: 'My Awesome Product Demo', video_duration: 120 });
           });
           ```
       *   - [ ] Emphasize that `eventName` should be a descriptive string, and `eventData` is an optional JavaScript object for additional properties (add to page documentation).

**2. Declarative Event Tracking with Data Attributes**

   *   **Frontend - `src/pages/WebsiteTrackingPage.tsx` (Documentation Aspect):**
       *   - [ ] Introduce a convention for developers to add `data-emailore-*` attributes to HTML elements to automatically track clicks with specific event names and data (add to page documentation).
       *   **Example HTML (to be added to page documentation):**
           ```html
           <button data-emailore-event="add_to_cart" data-emailore-item-id="prod456" data-emailore-category="apparel">Add to Cart</button>
           <a href="/contact" data-emailore-event="contact_us_click">Contact Us</a>
           ```
       *   **Tracking Script Enhancement (already part of Phase 1 script design but document here):**
           *   - [ ] The tracking script should include a global click listener.
           *   - [ ] This listener checks if the clicked element (or its near parents) has a `data-emailore-event` attribute.
           *   - [ ] If found, it automatically calls `sendEvent` (the internal script function) with the specified `eventName` and collects any other `data-emailore-*` attributes into the `eventData` object.

---

### Phase 3: Connecting Events to Email Automations (Future Outlook)

*   - [ ] **Brief Mention:** This map primarily focuses on the tracking setup. The next major step, after data collection is robust, will be to design and implement a system within Emailore that allows users to:
    1.  Define triggers based on `tracked_events` (e.g., `eventName IS 'add_to_cart' AND page_url CONTAINS '/checkout'`).
    2.  Specify actions, such as sending a particular email campaign after a certain delay.
*   - [ ] This will involve new UI in the Emailore dashboard, new database tables for automation rules (`automation_rules`, `pending_automation_emails`), and backend logic (likely Supabase Scheduled Functions) to process events against these rules.

---

**Sitemap Considerations for this document itself:**

- Path: `/websitetrackingmap`
- Purpose: Technical design and implementation plan for the website tracking pixel feature.
- Details: Outlines frontend components, backend functions, database schema, and phased rollout for tracking user website interactions. Focuses initially on developer-owned custom websites, and now includes guidance and placeholders for future platform-specific app installations (e.g., for Shopify, WordPress).
- Usage: Internal development guide for building the website tracking feature.