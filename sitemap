## Project Sitemap

📁 src/
├── 📁 backend/
│   ├── 📄 config.toml - Configuration for backend functions.
│   ├── 📄 deno.jsonc - Deno configuration for backend functions.
│   └── 📁 functions/
│       ├── 📁 _shared/
│       │   ├── 📄 cors.ts - Handles Cross-Origin Resource Sharing headers for backend functions.
│       │   ├── 📁 lib/
│       │   │   ├── 📄 constants.ts - Shared constants for backend services.
│       │   │   ├── 📄 dns-provider-instructions.ts - Contains DNS setup instructions for different providers.
│       │   │   ├── 📄 uuid-utils.ts - Utility functions for handling UUIDs.
│       │   │   └── 📄 uuid.ts - A library for UUID generation.
│       │   ├── 📁 services/
│       │   │   ├── 📄 agentLogger.ts - Service for logging the steps of the AI agentic process.
│       │   │   ├── 📄 differ.ts - Backend service for diffing email templates.
│       │   │   ├── 📄 htmlGenerator.ts - Backend service for generating HTML from email templates.
│       │   │   └── 📄 semanticParser.ts - Backend service for parsing semantic email content.
│       │   └── 📄 supabaseAdmin.ts - Initializes the Supabase admin client for privileged operations.
│       ├── 📁 clarify-user-intent/
│       │   └── 📄 index.ts - Supabase edge function to handle the AI clarification conversation with the user.
│       ├── 📁 create-blog-post/
│       │   └── 📄 index.ts - Supabase edge function to create a new blog post.
│       ├── 📁 create-stripe-checkout-session/
│       │   └── 📄 index.ts - Supabase edge function to create a Stripe checkout session for subscriptions.
│       ├── 📁 generate-email-changes/
│       │   ├── 📄 index.ts - Main Supabase edge function that orchestrates the agentic process for generating email changes.
│       │   └── 📁 steps/
│       │       ├── 📄 1-clarify-intent.ts - First step of the agentic process: clarifying user intent.
│       │       ├── 📄 2-plan-changes.ts - Second step of the agentic process: creating a plan for changes.
│       │       ├── 📄 3-execute-plan.ts - Third step of the agentic process: executing the change plan.
│       │       └── 📄 4-generate-diff.ts - Fourth step of the agentic process: generating a diff of the changes.
│       ├── 📁 get-domain-provider/
│       │   ├── 📄 dns-lookup.ts - Helper for DNS lookups.
│       │   ├── 📄 index.ts - Supabase edge function to detect the user's domain provider.
│       │   ├── 📄 provider-map.ts - Maps nameservers to known DNS providers.
│       │   └── 📄 types.ts - Types related to domain providers.
│       ├── 📁 get-or-create-tracking-id/
│       │   └── 📄 index.ts - Supabase edge function to get or create a tracking ID for a project.
│       ├── 📄 import_map.json - Deno import map for backend functions.
│       ├── 📁 ingest-tracking-event/
│       │   └── 📄 index.ts - Supabase edge function to ingest tracking pixel events.
│       ├── 📁 initiate-email-setup/
│       │   └── 📄 index.ts - Supabase edge function to start the email setup process (e.g., creating DNS records).
│       ├── 📁 manage-pending-changes/
│       │   └── 📄 index.ts - Supabase edge function to accept or reject pending email changes.
│       ├── 📁 save-email-setup-form/
│       │   └── 📄 index.ts - Supabase edge function to save data from the email setup form.
│       ├── 📁 send-preview-email/
│       │   ├── 📄 deno.json - Deno configuration specific to the send-preview-email function.
│       │   └── 📄 index.ts - Supabase edge function to send a preview email.
│       ├── 📁 stripe-webhook-handler/
│       │   ├── 📄 index.ts - Supabase edge function to handle incoming webhooks from Stripe.
│       │   └── 📄 types.ts - Types for Stripe webhook payloads.
│       ├── 📁 subscribe-to-free-plan/
│       │   └── 📄 index.ts - Supabase edge function to subscribe a user to the free plan.
│       ├── 📁 test-pixel-status/
│       │   └── 📄 index.ts - Supabase edge function to test the status of the tracking pixel.
│       └── 📁 verify-dns-records/
│           └── 📄 index.ts - Supabase edge function to verify a domain's DNS records.
├── 📁 components/
│   ├── 📄 ChatInterface.tsx - The main chat component for user interaction with the AI.
│   ├── 📄 DnsConfigurationModal.tsx - Modal dialog for displaying DNS configuration instructions.
│   ├── 📄 EmailHtmlRenderer.tsx - Renders email HTML content within a sandboxed iframe.
│   ├── 📄 EmailPreview.tsx - Component for previewing emails, including overlays for changes and selections.
│   ├── 📄 Footer.tsx - The application's footer component.
│   ├── 📄 GlobalDnsNotificationBar.tsx - A notification bar for global DNS status.
│   ├── 📄 LoadingScreen.tsx - A full-screen loading indicator.
│   ├── 📄 ManualEditPanel.tsx - Panel for manually editing the properties of a selected email element.
│   ├── 📄 Navbar.tsx - The main navigation bar for the application.
│   ├── 📁 editor/
│   │   ├── 📄 EditorHeader.tsx - The header component for the email editor page.
│   │   ├── 📄 EmailPreviewControls.tsx - Controls for the email preview (e.g., mobile/desktop view).
│   │   ├── 📄 EmailPreviewPanel.tsx - The panel that contains the email preview and its controls.
│   │   ├── 📄 InitialPromptScreen.tsx - The screen shown before the user has sent any messages.
│   │   ├── 📄 LoadingScreen.tsx - A loading screen specific to the editor.
│   │   └── 📄 PendingChangesBar.tsx - The bar that displays pending changes and allows accepting/rejecting them.
│   ├── 📁 subscription/
│   │   ├── 📄 PlanSelectionPage.tsx - A page where users can select a subscription plan.
│   │   └── 📄 SubscriptionProtectedRoute.tsx - A higher-order component to protect subscription-only routes.
│   └── 📁 ui/ - Contains reusable UI components from shadcn/ui.
├── 📁 contexts/
│   ├── 📄 DnsStatusContext.tsx - React context for managing global DNS status.
│   └── 📄 LoadingContext.tsx - React context for managing the global loading screen.
├── 📁 core/
│   ├── 📄 App.css - Main CSS file for the application.
│   ├── 📄 App.tsx - The root component of the application, handles routing and providers.
│   ├── 📄 constants.ts - Application-wide constants.
│   ├── 📄 emailCampaigns.ts - Defines the available email campaigns for selection.
│   ├── 📄 index.css - Global CSS styles and Tailwind setup.
│   ├── 📄 main.tsx - The main entry point of the React application.
│   └── 📄 vite-env.d.ts - TypeScript declarations for Vite environment variables.
├── 📁 features/
│   ├── 📁 auth/
│   │   └── 📄 useAuth.tsx - Hook for accessing authentication state and methods.
│   ├── 📁 contexts/
│   │   └── 📁 providers/
│   │       ├── 📄 AIProvider.tsx - Manages all state related to AI chat interactions.
│   │       ├── 📄 ChangesProvider.tsx - Manages the state of pending changes.
│   │       ├── 📄 ManualEditProvider.tsx - Manages state for the manual editing panel.
│   │       ├── 📄 ProjectProvider.tsx - Manages loading and saving the core project data.
│   │       └── 📄 UIStateProvider.tsx - Manages global UI state (loading, view modes, etc.).
│   ├── 📁 services/
│   │   ├── 📄 differ.ts - Frontend service for diffing email templates.
│   │   ├── 📄 htmlGenerator.ts - Frontend service for generating HTML from email templates.
│   │   ├── 📄 projectService.ts - Service for fetching and updating project data.
│   │   └── 📄 semanticParser.ts - Frontend service for parsing semantic email content.
│   ├── 📁 types/
│   │   ├── 📄 ai.ts - Types related to AI interactions.
│   │   └── 📄 index.ts - Main export file for feature types.
│   └── 📁 utils/
│       └── 📄 placeholderUtils.ts - Utility functions related to placeholders.
├── 📁 hooks/
│   ├── 📄 use-mobile.tsx - Hook to detect if the user is on a mobile device.
│   └── 📄 use-toast.ts - Hook for using the toast notification system.
├── 📁 integrations/
│   └── 📁 supabase/
│       ├── 📄 client.ts - Initializes the Supabase client.
│       └── 📄 types.ts - TypeScript types generated from the Supabase schema.
├── 📁 lib/
│   ├── 📄 utils.ts - General utility functions, including from shadcn/ui.
│   ├── 📄 uuid-utils.ts - Shared utility functions for handling UUIDs.
│   └── 📄 uuid.ts - A library for UUID generation.
├── 📁 pages/
│   ├── 📄 AuthGatePage.tsx - A page that forces guest users to sign up or log in.
│   ├── 📄 BlogIndexPage.tsx - Page to display a list of blog posts.
│   ├── 📄 BlogPostPage.tsx - Page to display a single blog post.
│   ├── 📄 BusinessClarificationPage.tsx - A step in the onboarding flow for clarifying business details.
│   ├── 📄 BusinessOverviewPage.tsx - A step in the onboarding flow to get the business overview.
│   ├── 📄 Dashboard.tsx - The main dashboard page for authenticated users.
│   ├── 📄 DnsConfirmationPage.tsx - A step in the onboarding flow for DNS confirmation.
│   ├── 📄 Editor.tsx - The main email editor page.
│   ├── 📄 GoalsFormPage.tsx - A step in the onboarding flow to define user goals.
│   ├── 📄 Index.tsx - The main landing page of the application.
│   ├── 📄 InfoClarificationPage.tsx - A step in the onboarding flow to review entered information.
│   ├── 📄 Login.tsx - The user login page.
│   ├── 📄 NotFound.tsx - The 404 not found page.
│   ├── 📄 OptionalSignUpPage.tsx - A step in the onboarding flow with an optional sign-up.
│   ├── 📄 PrivacyPolicy.tsx - The privacy policy page.
│   ├── 📄 SelectEmailsPage.tsx - A step in the onboarding flow to select email campaigns.
│   ├── 📄 SendEmailPage.tsx - A page for sending emails.
│   ├── 📄 Signup.tsx - The user signup page.
│   ├── 📄 TermsOfService.tsx - The terms of service page.
│   ├── 📄 WebsiteStatusPage.tsx - A step in the onboarding flow to check website status.
│   └── 📄 WebsiteTrackingPage.tsx - A step in the onboarding flow for setting up website tracking.
├── 📁 shared/
│   ├── 📁 config/
│   │   └── 📄 stripe.ts - Configuration for Stripe.
│   ├── 📁 lib/
│   │   ├── 📄 uuid-utils.ts - Shared utility functions for handling UUIDs.
│   │   └── 📄 uuid.ts - A library for UUID generation.
│   ├── 📁 services/
│   │   ├── 📄 differ.ts - Core service for diffing email templates.
│   │   ├── 📄 htmlGenerator.ts - Core service for generating HTML from email templates.
│   │   └── 📄 semanticParser.ts - Core service for parsing semantic email content.
│   └── 📁 types/
│       ├── 📄 blog.ts - Types for blog-related data structures.
│       ├── 📄 column.ts - Type definition for a Column in the grid system.
│       ├── 📄 common.ts - Common types shared across the application.
│       ├── 📁 config/
│       │   └── 📄 elementDefaults.ts - Default values for new email elements.
│       ├── 📄 diffs.ts - Types for diff objects.
│       ├── 📄 editor.ts - Types specific to the editor state and functionality.
│       ├── 📄 elements.ts - Type definitions for different Email Elements (e.g., Text, Image).
│       ├── 📄 index.ts - Main export file for shared types.
│       ├── 📄 pendingChangeTypes.ts - Types for pending changes.
│       ├── 📄 row.ts - Type definition for a Row in the grid system.
│       ├── 📄 sections.ts - Type definition for a Section in the grid system.
│       ├── 📄 styled-jsx.d.ts - Type definitions for styled-jsx.
│       ├── 📄 template.ts - Type definition for the main EmailTemplate structure.
│       └── 📄 validators.ts - Zod validators for data structures.
└── 📁 types/ - Global or ambient type definitions.
