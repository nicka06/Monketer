# Email Template Editor - Project Structure

## SIMPLE MAP

```
src/
├── backend/         # Supabase serverless functions
│   ├── .temp/       # Supabase CLI version tracking
│   ├── functions/   # Edge function implementations
│   │   ├── _shared/ # Shared utilities and services
│   │   │   ├── lib/ # Shared utilities
│   │   │   │   ├── constants.ts    # CORS and configuration
│   │   │   │   ├── uuid-utils.ts   # UUID validation utilities
│   │   │   │   └── uuid.ts         # UUID generation
│   │   │   └── services/ # Shared services
│   │   │       ├── differ.ts       # Template diffing
│   │   │       ├── htmlGenerator.ts # HTML generation
│   │   │       └── semanticParser.ts # HTML parsing
│   │   ├── clarify-user-intent/    # AI conversation middleware
│   │   │   └── index.ts            # Main function handler
│   │   ├── generate-email-changes/ # Email modification handler
│   │   │   └── index.ts            # Main function handler
│   │   ├── manage-pending-changes/ # Change workflow manager
│   │   │   └── index.ts            # Main function handler
│   │   ├── send-preview-email/     # Email preview sender
│   │   │   ├── index.ts            # Main function handler
│   │   │   ├── deno.json           # Deno configuration for send-preview-email
│   │   │   └── .npmrc              # NPM configuration for send-preview-email
│   │   └── import_map.json         # Module import path configuration
│   ├── config.toml  # Edge function configuration
│   └── deno.jsonc   # Deno runtime configuration
├── components/      # UI components for the application
│   ├── editor/                  # Editor-specific UI components
│   │   ├── EditorHeader.tsx
│   │   ├── EmailPreviewControls.tsx
│   │   ├── EmailPreviewPanel.tsx
│   │   ├── LoadingScreen.tsx
│   │   ├── InitialPromptScreen.tsx
│   │   ├── PendingChangesBar.tsx
│   │   └── PlaceholderEditModal.tsx
│   ├── ui/                      # All basic UI component files
│   ├── ChatInterface.tsx
│   ├── EmailHtmlRenderer.tsx
│   ├── EmailPreview.tsx
│   ├── FeaturesSection.tsx
│   ├── Footer.tsx
│   ├── HeroSection.tsx
│   ├── Navbar.tsx
│   └── TestimonialsSection.tsx
├── core/            # Application bootstrap and entry point
│   ├── App.css
│   ├── App.tsx
│   ├── main.tsx
│   ├── vite-env.d.ts
│   └── index.css
├── features/        # Business logic by domain
│   ├── auth/
│   │   └── useAuth.tsx
│   ├── contexts/
│   │   └── EditorContext.tsx
│   ├── services/
│   │   ├── differ.ts
│   │   ├── htmlGenerator.ts
│   │   ├── projectService.ts
│   │   └── semanticParser.ts
│   ├── types/
│   │   ├── ai.ts
│   │   ├── editor.ts
│   │   └── index.ts
│   └── utils/
│       └── placeholderUtils.ts
├── hooks/           # Reusable React hooks
│   ├── use-toast.ts
│   └── use-mobile.tsx
├── integrations/    # External service connections
│   └── supabase/
│       ├── client.ts
│       └── types.ts
├── lib/             # General utilities
│   ├── utils.ts
│   ├── uuid-utils.ts
│   └── uuid.ts
├── pages/           # Page-level components
│   ├── Dashboard.tsx
│   ├── Editor.tsx
│   ├── Index.tsx
│   ├── Login.tsx
│   ├── NotFound.tsx
│   ├── PrivacyPolicy.tsx
│   ├── SendEmailPage.tsx
│   ├── Signup.tsx
│   └── TermsOfService.tsx
└── shared/          # Cross-environment shared code
    ├── lib/         # Shared utilities
    │   ├── uuid-utils.ts
    │   └── uuid.ts
    ├── services/    # Shared service implementations
    │   ├── htmlGenerator.ts # Core HTML generator implementation
    │   ├── differ.ts     # Core template diffing implementation
    │   └── semanticParser.ts # Core semantic parsing implementation
    └── types/       # Shared type definitions
        ├── common.ts # Common shared types and enums
        ├── diffs.ts # Template diffing type definitions
        ├── editor.ts # Editor and chat interface types
        ├── elements.ts # Email element type definitions
        ├── index.ts # Type re-exports for module access
        ├── pendingChangeTypes.ts # Pending change workflow types
        ├── sections.ts # Email section type definitions
        ├── template.ts # Email template structure types
        ├── validators.ts # Template validation schemas
        └── config/  # Configuration for type implementations
            └── elementDefaults.ts # Default element configurations
```

## SUMMARY MAP

📁 src/
├── 📁 backend/
│   ├── 📁 .temp/
│   │   Purpose: Supabase CLI version tracking
│   │   Details:
│   │   - Tracks CLI version information
│   │   - Manages local development state
│   │   - Used by Supabase CLI for version control
│   │
│   ├── 📁 functions/
│   │   ├── 📁 _shared/
│   │   │   ├── 📁 lib/
│   │   │   │   ├── 📄 constants.ts
│   │   │   │   │   Purpose: CORS and configuration constants
│   │   │   │   │   Details:
│   │   │   │   │   - CORS headers and settings
│   │   │   │   │   - API configuration values
│   │   │   │   │   - Environment-specific constants
│   │   │   │   │
│   │   │   │   ├── 📄 uuid-utils.ts
│   │   │   │   │   Purpose: UUID validation utilities
│   │   │   │   │   Details:
│   │   │   │   │   - UUID validation functions
│   │   │   │   │   - UUID formatting helpers
│   │   │   │   │   - Error handling for invalid UUIDs
│   │   │   │   │
│   │   │   │   └── 📄 uuid.ts
│   │   │   │       Purpose: UUID generation implementation
│   │   │   │       Details:
│   │   │   │       - UUID v4 generation
│   │   │   │       - Secure random number generation
│   │   │   │       - Type-safe UUID handling
│   │   │   │
│   │   │   └── 📁 services/
│   │   │       ├── 📄 differ.ts
│   │   │       │   Purpose: Template diffing service
│   │   │       │   Details:
│   │   │       │   - Compares template versions
│   │   │       │   - Generates change sets
│   │   │       │   - Handles conflict resolution
│   │   │       │
│   │   │       ├── 📄 htmlGenerator.ts
│   │   │       │   Purpose: HTML generation service
│   │   │       │   Details:
│   │   │       │   - Converts templates to HTML
│   │   │       │   - Handles email-specific formatting
│   │   │       │   - Manages responsive design
│   │   │       │
│   │   │       └── 📄 semanticParser.ts
│   │   │           Purpose: HTML parsing service
│   │   │           Details:
│   │   │           - Parses HTML into structured data
│   │   │           - Extracts semantic meaning
│   │   │           - Validates template structure
│   │   │
│   │   ├── 📁 clarify-user-intent/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: AI conversation middleware
│   │   │       Details:
│   │   │       - Core Functionality:
│   │   │         • Analyzes user messages for ambiguity
│   │   │         • Asks targeted clarifying questions
│   │   │         • Provides structured data for email generation
│   │   │       - Input Processing:
│   │   │         • User message analysis
│   │   │         • Chat history context
│   │   │         • Current email structure
│   │   │         • Ongoing clarification context
│   │   │       - Response Types:
│   │   │         • Clarification questions with suggestions
│   │   │         • Complete structured data for email generation
│   │   │       - Technical Features:
│   │   │         • Token limit management
│   │   │         • Context window optimization
│   │   │         • JSON response validation
│   │   │         • Error handling and recovery
│   │   │
│   │   ├── 📁 generate-email-changes/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Email modification handler
│   │   │       Details:
│   │   │       - Processes user requests for changes
│   │   │       - Generates email modifications
│   │   │       - Validates changes before application
│   │   │
│   │   ├── 📁 manage-pending-changes/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Change workflow manager
│   │   │       Details:
│   │   │       - Manages pending changes queue
│   │   │       - Handles change application
│   │   │       - Coordinates change conflicts
│   │   │
│   │   └── 📁 send-preview-email/
│   │       └── 📄 index.ts
│   │           Purpose: Email preview sender
│   │           Details:
│   │           - Generates preview emails
│   │           - Handles email delivery
│   │           - Manages preview templates
│   │       ├── 📄 deno.json
│   │       │   Purpose: Deno configuration for send-preview-email
│   │       │   Details:
│   │       └── 📄 .npmrc
│   │           Purpose: NPM configuration for send-preview-email
│   │           Details:
│   │
│   ├── 📄 import_map.json
│   │   Purpose: Module import path configuration
│   │   Details:
│   │   - Defines import path aliases for Supabase edge functions.
│   │   - Helps manage module resolution and maintain cleaner import statements.
│   │
│   ├── 📄 config.toml
│   │   Purpose: Edge function configuration and settings
│   │   Details:
│   │   - Function-specific settings:
│   │     • JWT verification requirements
│   │     • Function enablement flags
│   │     • Entrypoint specifications
│   │   - Import configuration:
│   │     • Import map paths
│   │     • Static file bundling
│   │   - Security settings:
│   │     • Authentication requirements
│   │     • Access controls
│   │   Usage:
│   │   - Configures each edge function's behavior
│   │   - Manages function dependencies
│   │   - Controls function security
│   │
│   └── 📄 deno.jsonc
│       Purpose: Deno runtime configuration
│       Details:
│       - Core Configuration:
│         • Import map resolution
│         • Module dependency paths
│         • Runtime settings
│       - Technical Design:
│         • JSONC format for comments
│         • Centralized import management
│         • Runtime optimization settings
│       Usage:
│       - Resolves module imports
│       - Manages dependencies
│       - Configures Deno runtime
│   
├── 📁 components/
│   ├── 📄 ChatInterface.tsx
│   │   Purpose: Provides the main chat interface for user-AI interactions
│   │   Details:
│   │   - Handles three interaction modes:
│   │     • Major Edit: For significant changes
│   │     • Minor Edit: For small adjustments
│   │     • Just Ask: For questions without edits
│   │   - Message Features:
│   │     • Renders markdown content
│   │     • Supports clarification workflows
│   │     • Shows suggestion buttons
│   │     • Displays loading states
│   │     • Auto-scrolls to new messages
│   │   - Input Features:
│   │     • Multi-line support (Shift+Enter)
│   │     • Focus management
│   │     • Loading states
│   │     • Placeholder text
│   │   - UI Components:
│   │     • Mode selection buttons
│   │     • Message history area
│   │     • Input area with send button
│   │     • Clarification banner when needed
│   │   Dependencies:
│   │   - UI: Button, Textarea, ScrollArea, ReactMarkdown
│   │   - Icons: Send, Paperclip, Mic, CornerDownLeft, AlertTriangle, Wand2
│   │   - Utils: cn (className utility)
│   │   State Management:
│   │   - Local: Input value, scroll position
│   │   - Props: Messages, clarification state, loading state, mode selection
│   │
│   ├── 📄 EmailHtmlRenderer.tsx
│   │   Purpose: Renders email content in an isolated iframe environment
│   │   Details:
│   │   - Transforms HTML email templates into interactive previews
│   │   - Handles two types of placeholders (images and links)
│   │   - Manages background colors and styling
│   │   - Provides auto-resizing functionality
│   │   - Implements security measures (HTML escaping)
│   │   - Uses ResizeObserver for dynamic content
│   │   Dependencies: React, forwardRef, useEffect, useRef
│   │
│   ├── 📄 EmailPreview.tsx
│   │   Purpose: Provides interactive preview of email content with overlay management
│   │   Details:
│   │   - Iframe Integration:
│   │     • Uses EmailHtmlRenderer for content display
│   │     • Maintains coordinate mapping with parent document
│   │     • Handles scroll synchronization
│   │   - Overlay System:
│   │     • Two-layer architecture for different overlay types
│   │     • Non-interactive overlays for pending changes
│   │     • Interactive overlays for placeholders
│   │     • Absolute positioning with scroll compensation
│   │   - Responsive Features:
│   │     • Mobile/desktop preview modes
│   │     • Dark/light theme switching
│   │     • Maintains aspect ratios
│   │   - Performance Optimizations:
│   │     • RAF-based animations
│   │     • Batched DOM operations
│   │     • Efficient event cleanup
│   │   Dependencies:
│   │   - Components: EmailHtmlRenderer
│   │   - Utils: cn, isPlaceholder
│   │   - Types: EmailElement, ImageElementProperties, ButtonElementProperties
│   │   State Management:
│   │   - Refs: overlay container, html renderer
│   │   - Props: currentHtml, pendingChanges, preview modes, callbacks
│   │
│   ├── 📄 FeaturesSection.tsx
│   │   Purpose: Marketing component displaying key platform features
│   │   Details:
│   │   - Content Structure:
│   │     • Static features array with 3 key capabilities
│   │     • Each feature has title, description, and image
│   │     • Unsplash images for feature illustrations
│   │   - Layout:
│   │     • Responsive grid (1/2/3 columns)
│   │     • Centered header section
│   │     • Card-based feature display
│   │   - UI Features:
│   │     • Hover effects on cards
│   │     • Image zoom animations
│   │     • Consistent spacing and typography
│   │   Dependencies:
│   │   - Styling: Tailwind CSS
│   │   - No external component dependencies
│   │   State Management:
│   │   - Stateless component
│   │   - Uses static data array
│   │
│   ├── 📄 Footer.tsx
│   │   Purpose: Site-wide footer providing navigation and branding
│   │   Details:
│   │   - Content Structure:
│   │     • Organized into 4 navigation categories:
│   │       - Product: Features, pricing, roadmap, guides
│   │       - Company: About, blog, careers, partners
│   │       - Support: Help, docs, contact, status
│   │       - Legal: Privacy, terms, cookies
│   │     • Dynamic copyright year
│   │     • Brand section with logo and tagline
│   │   - Layout:
│   │     • Responsive 3-column grid on XL screens
│   │     • Left column: Brand section
│   │     • Center/Right: Navigation sections (2x2 grid)
│   │   - UI Features:
│   │     • Dark theme (bg-gray-900)
│   │     • Hover effects on navigation links
│   │     • Semantic HTML structure with ARIA labels
│   │   Dependencies:
│   │   - Components: Link from react-router-dom
│   │   - Styling: Tailwind CSS
│   │   State Management:
│   │   - Stateless component
│   │   - Uses static navigation data structure
│   │
│   ├── 📄 HeroSection.tsx
│   │   Purpose: Landing page hero section for email generation entry point
│   │   Details:
│   │   - User Flow:
│   │     • Email content input and persistence
│   │     • Authentication gating
│   │     • Seamless navigation to auth routes
│   │     • Content preservation during auth flow
│   │   - UI Components:
│   │     • Decorative gradient background
│   │     • Centered content layout
│   │     • Multi-line text input
│   │     • Animated submit button
│   │     • Authentication modal
│   │   - Features:
│   │     • Session persistence with localStorage
│   │     • Responsive design across breakpoints
│   │     • Interactive UI elements
│   │     • Form validation and handling
│   │   Dependencies:
│   │   - UI: Button, Textarea, Dialog components
│   │   - Icons: ArrowRight from lucide-react
│   │   - Routing: react-router-dom
│   │   State Management:
│   │   - Local: emailContent, showAuthDialog
│   │   - Storage: localStorage for content persistence
│   │   - Navigation: useNavigate for routing
│   │
│   ├── 📄 Navbar.tsx
│   │   Purpose: Responsive navigation bar with authentication options
│   │   Details:
│   │   - Layout Modes:
│   │     • Desktop: Horizontal navigation with brand and auth buttons
│   │     • Mobile: Collapsible menu with hamburger button
│   │     • Fixed positioning with blur effect overlay
│   │   - Visual Elements:
│   │     • Brand section with Mail icon and text
│   │     • Semi-transparent background with blur
│   │     • Animated hamburger menu
│   │     • Consistent monketer purple theming
│   │   - Interactive Features:
│   │     • Responsive breakpoint handling
│   │     • Smooth menu transitions
│   │     • Button hover states
│   │     • Accessible navigation
│   │   Dependencies:
│   │   - UI: Button component from shadcn/ui
│   │   - Icons: Mail from lucide-react
│   │   - Routing: Link from react-router-dom
│   │   - Styling: Tailwind CSS
│   │   State Management:
│   │   - Local: mobileMenuOpen for menu toggle
│   │   - ARIA states for accessibility
│   │
│   ├── 📄 TestimonialsSection.tsx
│   │   Purpose: Marketing component showcasing customer success stories
│   │   Details:
│   │   - Content Structure:
│   │     • Static testimonials array with customer feedback
│   │     • Each testimonial includes:
│   │       - Unique identifier
│   │       - Customer quote
│   │       - Name and title
│   │       - Company information
│   │   - Layout Design:
│   │     • Responsive grid system (1/2/3 columns)
│   │     • Card-based presentation
│   │     • Centered section header
│   │     • Consistent spacing and alignment
│   │   - Visual Elements:
│   │     • Light purple section background
│   │     • White testimonial cards
│   │     • Gradient avatars with initials
│   │     • Decorative quote marks
│   │     • Subtle shadows and borders
│   │   Dependencies:
│   │   - No external component dependencies
│   │   - Styling: Tailwind CSS
│   │   State Management:
│   │   - Stateless component
│   │   - Uses static testimonial data
│   │
│   ├── 📁 editor/
│   │   Purpose: Editor-specific UI components
│   │   Details:
│   │   ├── 📄 EditorHeader.tsx
│   │   │   Purpose:
│   │   │   Details:
│   │   ├── 📄 EmailPreviewControls.tsx
│   │   │   Purpose:
│   │   │   Details:
│   │   ├── 📄 EmailPreviewPanel.tsx
│   │   │   Purpose:
│   │   │   Details:
│   │   ├── 📄 InitialPromptScreen.tsx
│   │   │   Purpose:
│   │   │   Details:
│   │   ├── 📄 LoadingScreen.tsx
│   │   │   Purpose:
│   │   │   Details:
│   │   ├── 📄 PendingChangesBar.tsx
│   │   │   Purpose:
│   │   │   Details:
│   │   └── 📄 PlaceholderEditModal.tsx
│   │       Purpose:
│   │       Details:
│   └── 📁 ui/
│       // Base UI components used across the application
├── 📁 core/
│   Purpose: Application bootstrap and entry point
│   Details:
│   ├── 📄 App.css
│   │   Purpose:
│   │   Details:
│   ├── 📄 App.tsx
│   │   Purpose:
│   │   Details:
│   ├── 📄 main.tsx
│   │   Purpose:
│   │   Details:
│   ├── 📄 vite-env.d.ts
│   │   Purpose:
│   │   Details:
│   └── 📄 index.css
│       Purpose:
│       Details:
├── 📁 features/
│   Purpose: Business logic by domain
│   Details:
│   ├── 📁 auth/
│   │   Purpose:
│   │   Details:
│   │   └── 📄 useAuth.tsx
│   │       Purpose:
│   │       Details:
│   ├── 📁 contexts/
│   │   Purpose:
│   │   Details:
│   │   └── 📄 EditorContext.tsx
│   │       Purpose:
│   │       Details:
│   ├── 📁 services/
│   │   Purpose:
│   │   Details:
│   │   ├── 📄 differ.ts
│   │   │   Purpose:
│   │   │   Details:
│   │   ├── 📄 htmlGenerator.ts
│   │   │   Purpose:
│   │   │   Details:
│   │   ├── 📄 projectService.ts
│   │   │   Purpose:
│   │   │   Details:
│   │   └── 📄 semanticParser.ts
│   │       Purpose:
│   │       Details:
│   ├── 📁 types/
│   │   Purpose:
│   │   Details:
│   │   ├── 📄 ai.ts
│   │   │   Purpose:
│   │   │   Details:
│   │   ├── 📄 editor.ts
│   │   │   Purpose:
│   │   │   Details:
│   │   └── 📄 index.ts
│   │       Purpose:
│   │       Details:
│   └── 📁 utils/
│       Purpose:
│       Details:
│       └── 📄 placeholderUtils.ts
│           Purpose:
│           Details:
├── 📁 hooks/
│   Purpose: Reusable React hooks
│   Details:
│   ├── 📄 use-toast.ts
│   │   Purpose:
│   │   Details:
│   └── 📄 use-mobile.tsx
│       Purpose:
│       Details:
├── 📁 integrations/
│   Purpose: External service connections
│   Details:
│   └── 📁 supabase/
│       Purpose:
│       Details:
│       ├── 📄 client.ts
│       │   Purpose:
│       │   Details:
│       └── 📄 types.ts
│           Purpose:
│           Details:
├── 📁 lib/
│   Purpose: General utilities
│   Details:
│   ├── 📄 utils.ts
│   │   Purpose:
│   │   Details:
│   ├── 📄 uuid-utils.ts
│   │   Purpose:
│   │   Details:
│   └── 📄 uuid.ts
│       Purpose:
│       Details:
├── 📁 pages/
│   Purpose: Page-level components
│   Details:
│   ├── 📄 Dashboard.tsx
│   │   Purpose:
│   │   Details:
│   ├── 📄 Editor.tsx
│   │   Purpose:
│   │   Details:
│   ├── 📄 Index.tsx
│   │   Purpose:
│   │   Details:
│   ├── 📄 Login.tsx
│   │   Purpose:
│   │   Details:
│   ├── 📄 NotFound.tsx
│   │   Purpose:
│   │   Details:
│   ├── 📄 PrivacyPolicy.tsx
│   │   Purpose:
│   │   Details:
│   ├── 📄 SendEmailPage.tsx
│   │   Purpose:
│   │   Details:
│   ├── 📄 Signup.tsx
│   │   Purpose:
│   │   Details:
│   └── 📄 TermsOfService.tsx
│       Purpose:
│       Details:
└── 📁 shared/
    Purpose: Cross-environment shared code
    Details:
    ├── 📁 lib/
    │   Purpose: Shared utilities
    │   Details:
    │   ├── 📄 uuid-utils.ts
    │   │   Purpose:
    │   │   Details:
    │   └── 📄 uuid.ts
    │       Purpose:
    │       Details:
    ├── 📁 services/
    │   Purpose: Shared service implementations
    │   Details:
    │   ├── 📄 htmlGenerator.ts
    │   │   Purpose: Core HTML generator implementation
    │   │   Details:
    │   ├── 📄 differ.ts
    │   │   Purpose: Core template diffing implementation
    │   │   Details:
    │   └── 📄 semanticParser.ts
    │       Purpose: Core semantic parsing implementation
    │       Details:
    └── 📁 types/
        Purpose: Shared type definitions
        Details:
        ├── 📄 common.ts
        │   Purpose: Common shared types and enums
        │   Details:
        ├── 📄 diffs.ts
        │   Purpose: Template diffing type definitions
        │   Details:
        ├── 📄 editor.ts
        │   Purpose: Editor and chat interface types
        │   Details:
        ├── 📄 elements.ts
        │   Purpose: Email element type definitions
        │   Details:
        ├── 📄 index.ts
        │   Purpose: Type re-exports for module access
        │   Details:
        ├── 📄 pendingChangeTypes.ts
        │   Purpose: Pending change workflow types
        │   Details:
        ├── 📄 sections.ts
        │   Purpose: Email section type definitions
        │   Details:
        ├── 📄 template.ts
        │   Purpose: Email template structure types
        │   Details:
        ├── 📄 validators.ts
        │   Purpose: Template validation schemas
        │   Details:
        └── 📁 config/
            Purpose: Configuration for type implementations
            Details:
            └── 📄 elementDefaults.ts
                Purpose: Default element configurations
                Details: