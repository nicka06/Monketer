## SUMMARY MAP

📁 supabase/
  Purpose: Configuration and local development files for Supabase.
  Details: This directory typically holds CLI-generated files, migrations, and project-specific Supabase settings.
  ├── 📄 config.toml
  │   Purpose: Main configuration file for the Supabase CLI, overriding default behaviors and specifying project structure.
  │   Details:
  │   - Defines function-specific settings for `clarify-user-intent`.
  │   - `entrypoint`: Specifies the direct path to the main `index.ts` file for the `clarify-user-intent` function, relative to the `supabase` directory itself (e.g., `../src/backend/functions/clarify-user-intent/index.ts`). This tells the CLI where to find the function code if it's not in the default `supabase/functions` location.
  │   - `import_map`: Specifies the path to the `import_map.json` file used by Deno for this function, also relative to the `supabase` directory (e.g., `../src/backend/functions/import_map.json`). This ensures correct module resolution during bundling and deployment.
  │   - **Also defines similar `entrypoint` and `import_map` settings for the `generate-email-changes` function.**
  │   Usage: Crucial for deploying Edge Functions when they are not located in the default `supabase/functions` directory. Ensures the Supabase CLI can locate the function code and its dependencies correctly.

📁 src/
├── 📁 backend/
│   ├── 📁 functions/
│   │   ├── 📁 stripe-webhook-handler/
│   │   │   ├── 📄 index.ts
│   │   │   │   Purpose: Handles Stripe webhook events for subscription management.
│   │   │   │   Details:
│   │   │   │   - Processes various Stripe events (checkout.session.completed, invoice events, subscription updates).
│   │   │   │   - Updates user subscription status and tier in Supabase database.
│   │   │   │   - Handles subscription lifecycle (creation, updates, cancellation).
│   │   │   │   - Integrates with Stripe API and Supabase client.
│   │   │   │   Usage: Deployed as Supabase Edge Function to handle Stripe webhook notifications.
│   │   │   │
│   │   │   └── 📄 types.ts
│   │   │       Purpose: Type definitions for subscription-related data.
│   │   │       Details:
│   │   │       - Defines `SubscriptionTier` type ('free' | 'pro' | 'premium').
│   │   │       - Defines `SubscriptionPlan` interface.
│   │   │       - Provides utility function `determineTierFromPriceId`.
│   │   │       Usage: Used by webhook handler and other subscription-related components.
│   │   │
│   ├── 📁 .temp/  
│   │   Purpose: Supabase CLI version tracking or temporary build files for backend.
│   │   Details: (Clarify based on actual use)
│   │
│   ├── 📁 functions/ 
│   │   ├── 📁 _shared/
│   │   │   Purpose: Contains shared code, types, or utilities used by multiple backend functions.
│   │   │   Details: For example, `cors.ts` for CORS headers, `lib/` for more complex shared utilities.
│   │   │   Usage: Imported by other functions to reduce code duplication.
│   │   │   Files:
│   │   │     *   **`cors.ts`**
│   │   │         *   Purpose: Provides basic Cross-Origin Resource Sharing (CORS) headers for Deno functions.
│   │   │         *   Details: Exports a `corsHeaders` object: `{"Access-Control-Allow-Origin": "*", "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type", "Access-Control-Allow-Methods": "POST, GET, OPTIONS"}`. The wildcard origin is suitable for development but should be more restrictive in production.
│   │   │         *   Usage: Imported directly by Deno functions (e.g., `save-email-setup-form`) for simple OPTIONS request handling and adding permissive CORS headers.
│   │   │   ├── 📁 lib/
│   │   │   │   ├── 📄 constants.ts
│   │   │   │   │   Purpose: Manages Cross-Origin Resource Sharing (CORS) configuration for Supabase Edge Functions, ensuring secure API access.
│   │   │   │   │   Details:
│   │   │   │   │   - Defines a whitelist of `ALLOWED_ORIGINS` for production (monketer.com, www.monketer.com) and common development ports (localhost:3000, localhost:5173, localhost:8080).
│   │   │   │   │   - Exports `corsHeadersFactory(requestOrigin)`: A function that dynamically generates appropriate CORS headers. It returns the `requestOrigin` if it's in `ALLOWED_ORIGINS`, otherwise defaults to the primary production origin. This is the recommended method.
│   │   │   │   │   - Specifies allowed HTTP headers (authorization, x-client-info, apikey, content-type) and methods (GET, POST, PUT, DELETE, OPTIONS).
│   │   │   │   │   - Sets `Access-Control-Max-Age` to `86400` (24 hours) for preflight request caching.
│   │   │   │   │   - Includes legacy `corsHeaders` with a wildcard `Access-Control-Allow-Origin: '*'`, which is deprecated but maintained for backward compatibility.
│   │   │   │   │   Usage:
│   │   │   │   │   - `corsHeadersFactory` is imported and used by multiple Supabase Edge Functions (`clarify-user-intent`, `generate-email-changes`, `manage-pending-changes`, `send-preview-email`) to set response headers for main requests, error responses, and OPTIONS preflight requests.
│   │   │   │   │   - The legacy `corsHeaders` is directly used for OPTIONS preflight request handling in `generate-email-changes/index.ts`.
│   │   │   │   │
│   │   │   │   ├── 📄 uuid-utils.ts
│   │   │   │   │   Purpose: Shared, canonical utility functions for validating and cleaning UUID strings.
│   │   │   │   │   Details: Provides `isValidUuid(id)` to check format via regex. Provides `cleanUuid(id)` to sanitize by removing trailing spaces/digits before validation.
│   │   │   │   │   Usage: Used across frontend/backend for UUID validation/sanitization, replacing previous duplicate implementations.
│   │   │   │   │
│   │   │   │   └── 📄 uuid.ts
│   │   │   │       Purpose: Shared, canonical implementation for generating UUID v4 strings.
│   │   │   │       Details: Uses `v4 as uuidv4` imported from a URL (`https://esm.sh/uuid`) for Deno/browser compatibility. A `@ts-ignore` comment is used to suppress a local TypeScript linter error related to resolving types from the URL, as Deno handles this at runtime. Exports `generateId()`.
│   │   │   │       Usage: Standard way to generate unique IDs across the application (elements, sections, projects, etc.), replacing previous implementations that might have used direct npm package imports.
│   │   │   │
│   │   │   └── 📁 services/
│   │   │       ├── 📄 differ.ts
│   │   │       │   Purpose: Backend-specific adapter for the V2 template diffing service.
│   │   │       │   Details:
│   │   │       │   - Extends `DifferV2Core` from `src/shared/services/differ.ts`.
│   │   │       │   - Currently provides no backend-specific overrides, simply inherits core diffing logic.
│   │   │       │   - Exports `DifferV2` class.
│   │   │       │   Usage: Used internally by backend functions like `generate-email-changes` and `manage-pending-changes` when V2 diff calculations are needed.
│   │   │       │
│   │   │       ├── 📄 htmlGenerator.ts
│   │   │       │   Purpose: Backend adapter for the V2 HTML email generation service, extending `HtmlGeneratorCore`.
│   │   │       │   Details:
│   │   │       │   - Adapts `HtmlGeneratorCore` (from `src/shared/services/htmlGenerator.ts`) for the backend Deno environment.
│   │   │       │   - Does not override any core methods, simply inherits the HTML generation logic.
│   │   │       │   - **This means it includes the functionality from `HtmlGeneratorCore` to add `data-section-id` attributes to section containers, making these IDs available in the HTML stored in the database.**
│   │   │       │   - Exports `HtmlGeneratorV2` class and a convenience `generateHtml(template)` function.
│   │   │       │   Usage: Used by backend functions like `manage-pending-changes` to generate the final HTML for accepted email templates before saving to the database.
│   │   │       │
│   │   │       └── 📄 semanticParser.ts 
│   │   │           Purpose: Backend adapter for V2 email HTML semantic parsing (if applicable, or if shared and used by backend).
│   │   │           Details: (Details would depend on its actual backend use)
│   │   │           Usage: (Usage would depend on its actual backend use)
│   │   │
│   │   ├── 📁 clarify-user-intent/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: AI conversation middleware, served as a Supabase Edge Function.
│   │   │       Details: (Content as previously listed, summarized for brevity)
│   │   │       - Analyzes user messages, asks clarifying questions, provides structured data for email generation.
│   │   │       - Manages context, token limits, error handling.
│   │   │       Usage: HTTP POST endpoint for frontend, uses OpenAI.
│   │   │
│   │   ├── 📁 generate-email-changes/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Supabase Edge Function to process AI-driven modifications to email templates, convert into granular pending changes, and save.
│   │   │       Details: (Content as previously listed, summarized for brevity)
│   │   │       - Receives payload, constructs OpenAI prompt for complete `EmailTemplateV2` (new or modified).
│   │   │       - Parses AI response, merges with defaults, validates, generates batch ID.
│   │   │       - Calls `convertDiffToGranularRows` to create `GranularPendingChangeInput[]`.
│   │   │       - Saves granular changes to `pending_changes` table.
│   │   │       Usage: Called by frontend after clarification to generate pending changes.
│   │   │
│   │   ├── 📁 manage-pending-changes/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Supabase Edge Function to manage granular pending V2 template changes (accept/reject/get).
│   │   │       Details: (Content as previously listed, summarized for brevity)
│   │   │       - Handles `accept_one`, `reject_one`, `accept_batch`, `reject_batch`, `get_batch`, `get_all_project`.
│   │   │       - Uses `applyPendingChanges` helper to modify `EmailTemplateV2`.
│   │   │       - Regenerates HTML using `HtmlGeneratorV2` on acceptance.
│   │   │       - Updates project's `semantic_email_v2`, `current_html`, and change statuses in DB.
│   │   │       Usage: HTTP POST endpoint for frontend to manage pending changes.
│   │   │
│   │   ├── 📁 send-preview-email/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Supabase Edge Function to send an email with provided HTML content for preview.
│   │   │       Details: (Content as previously listed, summarized for brevity)
│   │   │       - Accepts `recipientEmail` and `emailHtml`.
│   │   │       - Uses `nodemailer` with Gmail SMTP (env var credentials) to send.
│   │   │       Usage: HTTP POST endpoint for frontend to send preview emails.
│   │   │
│   │   ├── 📁 save-email-setup-form/
│   │   │   ├── 📄 index.ts
│   │   │   │   Purpose: Supabase Edge Function to save user's initial email setup information.
│   │   │   │   Details:
│   │   │   │     - Receives form data (business area, goals, scenarios, default sender, domain, sendTimeline).
│   │   │   │     - Authenticates the user.
│   │   │   │     - Validates required fields like domain, defaultFromEmail, defaultFromName.
│   │   │   │     - Upserts data into the `email_setups` table (user_id, domain, business_area, etc., status "pending_dns_config", send_timeline).
│   │   │   │     - Upserts/deletes `scenario_sender_configs` associated with the `email_setup_id`.
│   │   │   │   Usage: Called by the frontend when the user submits the initial email setup form.
│   │   │   │
│   │   │   └── 📄 types.ts  
│   │   │       Purpose: Defines types and interfaces for save-email-setup-form.
│   │   │       Details: Contains `EmailSetupFormData` and `ScenarioSenderConfig`.
│   │   │       Usage: Used by `save-email-setup-form/index.ts`.
│   │   │
│   │   ├── 📁 initiate-email-setup/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Orchestrates the initial DNS configuration steps for a user's domain. All configurations are manual. Primarily focuses on DKIM setup by calling an external mail server API.
│   │   │       Details:
│   │   │         - Authenticates the user and retrieves the `email_setups` record by ID.
│   │   │         - **Idempotency Check:** If `dkim_public_key` column in `email_setups` table contains a valid Base64 key, it is reused.
│   │   │         - **Calls External Mail Server API:**
│   │   │           - Makes a POST request to `MAIL_SERVER_DKIM_ENDPOINT` (env var) with `{ domain }`. Expects `MAIL_SERVER_API_SECRET` (env var) for Bearer token authentication.
│   │   │           - Expects the mail server to return a JSON response like `{ dnsTxtRecord: "selector._domainkey.domain IN TXT \"v=DKIM1; k=rsa; p=PUBLIC_KEY_BASE64\"" }`.
│   │   │         - **DKIM Public Key Parsing & Validation:**
│   │   │           - Parses the received `dnsTxtRecord` string (using regex) to extract the Base64 public key part (`p=...`).
│   │   │           - Validates the extracted public key for valid Base64 format.
│   │   │         - **DNS Record Generation:**
│   │   │           - Generates required DNS records (MX, SPF TXT, DKIM TXT, DMARC TXT).
│   │   │           - Uses `DEFAULT_MX_VALUE` (env var) or a fallback for the MX record value.
│   │   │           - Uses `DEFAULT_SPF_VALUE` (env var) or a fallback for the SPF record value.
│   │   │           - Constructs the DKIM TXT record value using the (parsed and validated) public key and a DKIM selector (uses existing `dkim_selector` from DB or defaults to "default"). If parsing/validation/API call fails, a placeholder error value is used in the DKIM DNS record.
│   │   │         - **Database Update:** Updates the `email_setups` record with:
│   │   │           - `dns_provider_name` (from user input).
│   │   │           - `dns_setup_strategy` (always "manual").
│   │   │           - `dkim_selector` (used or defaulted).
│   │   │           - `dkim_public_key` (the extracted Base64 key, or `null` if provisioning failed).
│   │   │           - `dns_records_to_set` (the generated DNS records).
│   │   │           - `status` (always "awaiting_manual_dns_config").
│   │   │       Input: `{ emailSetupId: string, providerInfo: { name: string, nameservers: string[] } }`
│   │   │       Output: `{ dnsSetupStrategy: "manual", dkimSelector: string, requiredDnsRecords: DnsRecord[], message: string }`
│   │   │       Environment Variables Used: `SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY`, `MAIL_SERVER_DKIM_ENDPOINT`, `MAIL_SERVER_API_SECRET`, `DEFAULT_MX_VALUE`, `DEFAULT_SPF_VALUE`.
│   │   │
│   ├── 📁 supabase-admin-example/  
│   │   └── 📄 index.ts
│   │       Purpose: Example or utility function demonstrating Supabase admin client usage.
│   │       Details: (Content would depend on the specific example)
│   │       Usage: Reference for admin-level operations or a specific utility.
│   │
│   └── 📄 import_map.json 
│       Purpose: Deno import map for backend functions if shared across all, or general backend utilities.
│       Details: Maps module specifiers to URLs for Deno.
│       Usage: Used by Deno runtime to resolve imports for functions not having their own `import_map.json` or for shared backend code.
│
├── 📁 frontend/
│   ├── 📁 components/
│   │   ├── 📄 EmailSetupForm.tsx
│   │   │   Purpose: React component for the email setup onboarding form.
│   │   │   Details:
│   │   │   - Collects user input for business area, goals, scenarios, default sender info, domain.
│   │   │   - Handles form submission, calling the `save-email-setup-form` Supabase function.
│   │   │   - Likely includes state management for form fields and validation.
│   │   │   Usage: Integrated into the onboarding flow pages.
│   │   │
│   │   └── 📄 DnsConfigurationGuide.tsx
│   │       Purpose: React component to display DNS records and guide users on manual configuration.
│   │       Details:
│   │       - Takes DNS records (MX, SPF, DKIM, DMARC) as props.
│   │       - Presents them clearly to the user.
│   │       - May include instructions or links to common DNS provider help pages.
│   │       Usage: Shown after `initiate-email-setup` returns, as all setups are manual.
│   │
│   ├── 📁 contexts/
│   │   └── 📄 EmailSetupContext.tsx
│   │       Purpose: React context to manage state related to the email setup process.
│   │       Details:
│   │       - Holds state like `emailSetupId`, form data, DNS records, current step.
│   │       - Provides functions to interact with backend (e.g., save form, initiate DNS setup).
│   │       Usage: Wraps parts of the application involved in email setup.
│   │
│   ├── 📁 pages/
│   │   ├── 📄 EmailOnboardingPage.tsx
│   │   │   Purpose: Main page for the email setup onboarding flow.
│   │   │   Details:
│   │   │   - Likely orchestrates different steps of the onboarding (e.g., form, DNS config).
│   │   │   - Uses `EmailSetupContext` and relevant components.
│   │   │   Usage: Entry point for users setting up their email.
│   │
│   ├── 📁 services/
│   │   └── 📄 api.ts
│   │       Purpose: Frontend API service layer to interact with Supabase functions.
│   │       Details:
│   │       - Contains functions to call `save-email-setup-form` and `initiate-email-setup`.
│   │       - Handles Supabase client initialization, auth headers, error handling.
│   │       Usage: Used by components and context to communicate with the backend.
│   │
│   └── 📄 App.tsx 
│       Purpose: Main application component.
│       Details: Sets up routing, global providers (like EmailSetupContext).
│       Usage: Root of the React application.
│
├── 📁 shared/
│   ├── 📁 types/
│   │   ├── 📄 emailSetupTypes.ts 
│   │   │   Purpose: Shared type definitions for data structures used by both frontend and backend for email setup.
│   │   │   Details:
│   │   │   - `EmailSetupFormData` (if an identical structure is used, or a base type)
│   │   │   - `ProviderInfo`
│   │   │   - `DnsRecord`
│   │   │   - `InitiateEmailSetupRequest` (or its parts if constructed on frontend)
│   │   │   - `InitiateEmailSetupResponse` (or its parts)
│   │   │   Usage: Imported by frontend components/services and backend Supabase functions.
│   │   │
│   │   ├── 📄 pendingChangeTypes.ts
│   │   │   Purpose: Defines types related to granular pending changes for V2 email templates.
│   │   │   Details: Includes `GranularPendingChange`, `GranularPendingChangeInput`, `ChangeOperation`, `ChangeScope`, etc.
│   │   │   Usage: Used by `generate-email-changes` and `manage-pending-changes` functions, and potentially by frontend components that display or interact with these changes.
│   │   │
│   │   └── 📄 templateV2Types.ts
│   │       Purpose: Defines the core structure of V2 email templates.
│   │       Details: Includes `EmailTemplateV2`, `SectionV2`, `ElementV2`, and related style/property types. Uses Zod for validation.
│   │       Usage: Central type definition used by all services and functions that create, parse, modify, or render V2 email templates.
│   │
│   └── 📁 services/
│       ├── 📄 differ.ts (Shared Core)
│       │   Purpose: Core logic for diffing V2 email templates.
│       │   Details: Provides `DifferV2Core` class with methods to compare two `EmailTemplateV2` objects and identify differences.
│       │   Usage: Extended by backend-specific (`src/backend/functions/_shared/services/differ.ts`) and potentially frontend-specific adapters.
│       │
│       ├── 📄 htmlGenerator.ts (Shared Core)
│       │   Purpose: Core logic for generating HTML from V2 email templates.
│       │   Details: Provides `HtmlGeneratorCore` class with methods to convert an `EmailTemplateV2` object into an HTML string. Adds `data-section-id` attributes.
│       │   Usage: Extended by backend-specific (`src/backend/functions/_shared/services/htmlGenerator.ts`) and potentially frontend-specific adapters.
│       │
│       └── 📄 semanticParser.ts (Shared Core)
│           Purpose: Core logic for parsing HTML into a V2 email template structure.
│           Details: Provides `SemanticParserCore` class, defining the interface and shared utilities for converting HTML into `EmailTemplateV2`.
│           Usage: Extended by frontend-specific (`src/frontend/services/semanticParser.ts` - if it exists) and potentially backend adapters.
│
└── 📄 .env.example
    Purpose: Example environment variables file.
    Details: Lists required environment variables for the project (Supabase URL/keys, API keys, etc.) with placeholder values.
    Usage: Users copy this to `.env` and fill in their actual credentials.

---
**Notes on Structure:**
- The sitemap had some duplicate entries or unclear nesting for `src/backend/.temp/` and `src/backend/functions/`. I've tried to rationalize this into a single main `src/backend/functions/` path for the Edge Functions.
- The `semanticParser.ts` under `src/backend/functions/_shared/services/` was noted as a "Frontend adapter" in the original read. I've kept it there but added a note. If it's purely for frontend, it should be in `src/frontend/services/`. If it's a shared core or a backend adapter, its description should reflect that. The one under `src/shared/services/` is correctly labeled as "Shared Core".
- Added placeholder entries for typical frontend files and a shared `emailSetupTypes.ts` based on the project's needs. These would need to be confirmed or created.
---