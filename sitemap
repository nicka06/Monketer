## SUMMARY MAP

📁 supabase/
  Purpose: Configuration and local development files for Supabase.
  Details: This directory typically holds CLI-generated files, migrations, and project-specific Supabase settings.
  ├── 📄 config.toml
  │   Purpose: Main configuration file for the Supabase CLI, overriding default behaviors and specifying project structure.
  │   Details:
  │   - Defines function-specific settings for `clarify-user-intent`.
  │   - `entrypoint`: Specifies the direct path to the main `index.ts` file for the `clarify-user-intent` function, relative to the `supabase` directory itself (e.g., `../src/backend/functions/clarify-user-intent/index.ts`). This tells the CLI where to find the function code if it's not in the default `supabase/functions` location.
  │   - `import_map`: Specifies the path to the `import_map.json` file used by Deno for this function, also relative to the `supabase` directory (e.g., `../src/backend/functions/import_map.json`). This ensures correct module resolution during bundling and deployment.
  │   - **Also defines similar `entrypoint` and `import_map` settings for the `generate-email-changes` function.**
  │   Usage: Crucial for deploying Edge Functions when they are not located in the default `supabase/functions` directory. Ensures the Supabase CLI can locate the function code and its dependencies correctly.

📁 src/
├── 📁 backend/
│   ├── 📁 .temp/
│   │   Purpose: Supabase CLI version tracking
│   │   Details:
│   │   - Tracks CLI version information
│   │   - Manages local development state
│   │   - Used by Supabase CLI for version control
│   │
│   ├── 📁 functions/
│   │   ├── 📁 _shared/
│   │   │   ├── 📁 lib/
│   │   │   │   ├── 📄 constants.ts
│   │   │   │   │   Purpose: Manages Cross-Origin Resource Sharing (CORS) configuration for Supabase Edge Functions, ensuring secure API access.
│   │   │   │   │   Details:
│   │   │   │   │   - Defines a whitelist of `ALLOWED_ORIGINS` for production (monketer.com, www.monketer.com) and common development ports (localhost:3000, localhost:5173, localhost:8080).
│   │   │   │   │   - Exports `corsHeadersFactory(requestOrigin)`: A function that dynamically generates appropriate CORS headers. It returns the `requestOrigin` if it's in `ALLOWED_ORIGINS`, otherwise defaults to the primary production origin. This is the recommended method.
│   │   │   │   │   - Specifies allowed HTTP headers (authorization, x-client-info, apikey, content-type) and methods (GET, POST, PUT, DELETE, OPTIONS).
│   │   │   │   │   - Sets `Access-Control-Max-Age` to `86400` (24 hours) for preflight request caching.
│   │   │   │   │   - Includes legacy `corsHeaders` with a wildcard `Access-Control-Allow-Origin: '*'`, which is deprecated but maintained for backward compatibility.
│   │   │   │   │   Usage:
│   │   │   │   │   - `corsHeadersFactory` is imported and used by multiple Supabase Edge Functions (`clarify-user-intent`, `generate-email-changes`, `manage-pending-changes`, `send-preview-email`) to set response headers for main requests, error responses, and OPTIONS preflight requests.
│   │   │   │   │   - The legacy `corsHeaders` is directly used for OPTIONS preflight request handling in `generate-email-changes/index.ts`.
│   │   │   │   │
│   │   │   │   ├── 📄 uuid-utils.ts
│   │   │   │   │   Purpose: Shared, canonical utility functions for validating and cleaning UUID strings.
│   │   │   │   │   Details: Provides `isValidUuid(id)` to check format via regex. Provides `cleanUuid(id)` to sanitize by removing trailing spaces/digits before validation.
│   │   │   │   │   Usage: Used across frontend/backend for UUID validation/sanitization, replacing previous duplicate implementations.
│   │   │   │   │
│   │   │   │   └── 📄 uuid.ts
│   │   │   │       Purpose: Shared, canonical implementation for generating UUID v4 strings.
│   │   │   │       Details: Uses `v4 as uuidv4` imported from a URL (`https://esm.sh/uuid`) for Deno/browser compatibility. A `@ts-ignore` comment is used to suppress a local TypeScript linter error related to resolving types from the URL, as Deno handles this at runtime. Exports `generateId()`.
│   │   │   │       Usage: Standard way to generate unique IDs across the application (elements, sections, projects, etc.), replacing previous implementations that might have used direct npm package imports.
│   │   │   │
│   │   │   └── 📁 services/
│   │   │       ├── 📄 differ.ts
│   │   │       │   Purpose: Backend-specific adapter for the V2 template diffing service.
│   │   │       │   Details:
│   │   │       │   - Extends `DifferV2Core` from `src/shared/services/differ.ts`.
│   │   │       │   - Currently provides no backend-specific overrides, simply inherits core diffing logic.
│   │   │       │   - Exports `DifferV2` class.
│   │   │       │   Usage: Used internally by backend functions like `generate-email-changes` and `manage-pending-changes` when V2 diff calculations are needed.
│   │   │       │
│   │   │       ├── 📄 htmlGenerator.ts
│   │   │       │   Purpose: Frontend (browser) adapter for the V2 HTML email generation service, extending `HtmlGeneratorCore`.
│   │   │       │   Details:
│   │   │       │   - Adapts `HtmlGeneratorCore` (from `src/shared/services/htmlGenerator.ts`) for the frontend.
│   │   │       │   - Overrides element generation (`generateElementHtml`) specifically for `button` and `image` types to:
│   │   │       │   - Detect placeholder content using an `isPlaceholder` utility.
│   │   │       │   - Render placeholder elements with specific styling and text cues (e.g., "(Link Required)").
│   │   │       │   - Add `data-*` attributes (`data-element-id`, `data-property-path`, `data-placeholder`) to placeholder elements, enabling the visual editor to identify and manage them.
│   │   │       │   - Crucially, its `generateLayoutStyle` helper now correctly maps the semantic `layout.align` property (e.g., 'center') to the CSS `text-align` property for the wrapping table cell (`<td>`), ensuring correct alignment in the preview.
│   │   │       │   - Includes enhanced HTML `<head>` content with more robust CSS resets and email client compatibility meta tags.
│   │   │       │   - Exports `HtmlGeneratorV2` class and a convenience `generateHtml(template)` function.
│   │   │       │   Usage: Used by `EditorContext` to render the live preview of the email template, providing the necessary data attributes for interactive editing of placeholders.
│   │   │       │
│   │   │       └── 📄 semanticParser.ts
│   │   │           Purpose: Frontend (browser/Node.js) adapter for the V2 email HTML semantic parsing service, extending `SemanticParserCore`.
│   │   │           Details:
│   │   │           - Adapts `SemanticParserCore` (from `src/shared/services/semanticParser.ts`) for the frontend.
│   │   │           - Uses `JSDOM` to create a DOM from an HTML string for parsing.
│   │   │           - Implements the `parse(html)` method to convert HTML into a structured `EmailTemplateV2` object.
│   │   │           - Overrides methods for:
│   │   │             • Extracting global styles (body styles, content width).
│   │   │             • Locating the main email container and parsing sections/elements.
│   │   │             • Determining element types, potentially supporting more frontend-specific types (subtext, quote, code, list).
│   │   │           - Exports `SemanticParser` class.
│   │   │           Usage: Used to convert raw HTML (e.g., from an imported email or a previous version) into the structured `EmailTemplateV2` format that the editor and other services can work with.
│   │   │
│   │
│   ├── 📁 clarify-user-intent/
│   │   └── 📄 index.ts
│   │       Purpose: AI conversation middleware, served as a Supabase Edge Function.
│   │       Details:
│   │       - Core Functionality:
│   │         • Analyzes user messages for ambiguity
│   │         • Asks targeted clarifying questions (prioritizing broad over specific, limited to max 8 rounds)
│   │         • Provides structured data for email generation
│   │       - Input Processing:
│   │         • User message analysis
│   │         • Chat history context
│   │         • Current email structure
│   │         • Ongoing clarification context (including question count)
│   │       - Response Types:
│   │         • Clarification questions with suggestions and updated context (including question count)
│   │         • Complete structured data for email generation
│   │       - Technical Features:
│   │         • Token limit management
│   │         • Context window optimization
│   │         • JSON response validation
│   │         • Error handling and recovery
│   │         • Question count tracking and limit enforcement
│   │       Usage: Invoked as an HTTP POST endpoint by the frontend. It receives user messages, chat history, current email context, and ongoing clarification context (with question count). Based on its analysis and the question limit, it either returns a request for clarification or a structured set of instructions for the `generate-email-changes` function. It utilizes an OpenAI model (e.g., `gpt-4o-mini`) for its core logic.
│   │
│   ├── 📁 generate-email-changes/
│   │   └── 📄 index.ts
│   │       Purpose: Supabase Edge Function to apply AI-driven modifications to email templates and save them.
│   │       Details:
│   │       - Core Functionality:
│   │         • Receives a structured `GenerateEmailChangesPayload` (likely from `clarify-user-intent`) detailing the desired email modifications, including a "perfect prompt" and elements to process.
│   │         • Fetches the current `EmailTemplateV2` if it exists (`currentV2Template`).
│   │         • Constructs a system prompt for OpenAI based on whether `currentV2Template` exists:
│   │           - If creating a new email (`currentV2Template` is null): Instructs the AI to generate a *complete EmailTemplateV2* JSON object based on the prompt, providing a structural example and emphasizing inclusion of all required fields based on `elementDefaults`.
│   │           - If editing an existing email (`currentV2Template` exists): Instructs the AI to generate a *complete, modified EmailTemplateV2* JSON object reflecting the requested changes.
│   │           - **Both prompts now explicitly instruct the AI:**
│   │             1.  To **always include** a top-level `content` field for every element (using `\'\'` if needed).
│   │             2.  To **OMIT** optional string fields (like image/border properties) entirely if they are not applicable, instead of setting them to `null`.
│   │         • Calls the OpenAI API (gpt-4o-mini) with the constructed prompt and context.
│   │         • Parses the AI's JSON response.
│   │         • Merges the AI-generated element data with `elementDefaults` using a deep merge, ensuring all necessary properties are present.
│   │         • Crucially, iterates through the merged elements and explicitly sets a default `content` string (e.g., `\'\'` or text derived from properties like `alt` or `button text`) if the AI omitted it, preventing validation errors.
│   │         • Also converts any `null` values received from the AI for optional string properties (e.g., in image or border settings) to `undefined` to align with the Zod schema's expectation (string | undefined).
│   │         • **Also ensures that if a `properties.border` object exists after merging, the required `width`, `style`, and `color` properties have default string values (e.g., '1px', 'solid', '#000000') if they are `undefined`. This happens before the final Zod validation and has been confirmed to work correctly.**
│   │         • Validates the final `EmailTemplateV2` structure using Zod (`validateEmailTemplateV2`). Throws error if invalid.
│   │         • Generates the final HTML using `HtmlGenerator`.
│   │         • Calculates the difference between the old and new template using `DifferV2` if `currentV2Template` existed.
│   │         • Saves the new template (`semantic_email_v2`), HTML (`current_html`), and diff (`diff` in `pending_changes` table) to Supabase, overwriting previous pending changes.
│   │         • Updates the project's `last_edited_at` timestamp.
│   │       - Input: `GenerateEmailChangesPayload` (see function code for details).
│   │       - Output: JSON containing `newSemanticEmail` (EmailTemplateV2), `newHtml` (string), and `newPendingChanges` (TemplateDiffResult | null).
│   │       Usage: Called by the frontend (`EditorContext`) after the clarification flow (if any) is complete to generate the actual email changes based on the final user intent.
│   │
│   ├── 📁 manage-pending-changes/
│   │   └── 📄 index.ts
│   │       Purpose: Supabase Edge Function to accept or reject a set of pending V2 template changes for a project.
│   │       Details:
│   │       - Core Functionality:
│   │         • Handles HTTP POST requests with a `projectId` and an `action` ('accept' or 'reject').
│   │         • Fetches the project's current `semantic_email_v2` and its associated `pending_changes` (which is expected to be a `TemplateDiffResult` containing `oldTemplate` and `newTemplate` states).
│   │         • If 'accept':
│   │           - Assumes `pending_changes.diff.newTemplate` is the target state.
│   │           - Generates HTML from this target state using `HtmlGeneratorCore` (shared).
│   │           - Calls Supabase RPC `manage_accept_transaction` to update the project with the new template/HTML, mark changes as 'accepted', and increment project version.
│   │         • If 'reject':
│   │           - Assumes `pending_changes.diff.oldTemplate` is the target state to revert to.
│   │           - Generates HTML from this reverted state using `HtmlGeneratorCore` (shared).
│   │           - Calls Supabase RPC `manage_reject_transaction` to update the project with the reverted template/HTML and mark changes as 'rejected'.
│   │       - Key Dependencies:
│   │         • Supabase client (for DB operations and RPC calls).
│   │         • `corsHeadersFactory` (backend shared).
│   │         • `HtmlGeneratorCore` (shared service).
│   │         • Shared types (`EmailTemplate`, `PendingChange`).
│   │         • Supabase RPCs: `manage_accept_transaction`, `manage_reject_transaction`.
│   │       - Note: Contains `applyPendingChanges` and `applyRevert` helper functions that manipulate template objects based on change arrays, but these are not directly used by the main 'accept'/'reject' logic of this endpoint, which instead relies on the full old/new templates stored within the pending diff.
│   │       Usage: Invoked as an HTTP POST endpoint by the frontend to finalize or discard a set of proposed email template modifications.
│   │
│   ├── 📁 send-preview-email/
│   │   └── 📄 index.ts
│   │       Purpose: Supabase Edge Function to send an email with provided HTML content, typically for preview purposes.
│   │       Details:
│   │       - Core Functionality:
│   │         • Accepts a POST request with `recipientEmail` and `emailHtml` in the JSON payload.
│   │         • Uses `nodemailer` configured with Gmail SMTP (credentials from environment variables `GMAIL_USER`, `GMAIL_APP_PASSWORD`) to send the email.
│   │         • The provided `emailHtml` is used directly as the email body.
│   │       - Key Dependencies:
│   │         • `nodemailer` npm package.
│   │         • `corsHeadersFactory` from `../_shared/lib/constants.ts`.
│   │         • Gmail account credentials stored as Supabase secrets.
│   │       Usage: Invoked as an HTTP POST endpoint by the frontend to send a rendered HTML email to a user-specified address for previewing.
│   │   ├── 📄 deno.json
│   │   │   Purpose: Deno configuration specific to the `send-preview-email` function.
│   │   │   Details: Manages Deno runtime settings, task scripts, import maps, or permissions, potentially related to its use of npm modules like `nodemailer` via esm.sh or similar.
│   │   └── 📄 .npmrc
│   │       Purpose: NPM configuration file for the `send-preview-email` function.
│   │       Details: Specifies settings for npm package management if direct npm dependencies or private registries are used with Deno for this function.
│   │
│   ├── 📁 create-blog-post/        # NEW SUPABASE FUNCTION
│   │   └── 📄 index.ts
│   │       Purpose: Supabase Edge Function to create a new blog post.
│   │       Details:
│   │       - Handles HTTP POST requests with blog post data (title, slug, content, author, category, image_url, excerpt, published_at) in the JSON payload.
│   │       - Initializes Supabase client using environment variables.
│   │       - Validates that required fields (title, slug, content) are present.
│   │       - Inserts the validated post data into the `blog_posts` table.
│   │       - Returns the newly created blog post data (or an error message).
│   │       - Handles potential unique constraint violations for the `slug`.
│   │       - Uses `corsHeadersFactory` for CORS.
│   │       - Includes `// @ts-ignore` for Deno-specific imports and `Deno.env` access to satisfy local linters.
│   │       Usage: Intended to be called by an admin interface or a trusted frontend component to add new blog posts.
│   │
│   └── 📄 import_map.json
│       Purpose: Defines path aliases for Deno module imports within the Supabase Edge Functions.
│       Details: Maps short aliases (like `@/`, `shared/`, `@shared/`) to their actual relative paths from this file's location (`src/backend/functions/`). For example, `@/` maps to `../../src/`, `shared/` maps to `./_shared/` (i.e., `src/backend/functions/_shared/`), and `@shared/` maps to `../../shared/` (i.e., `src/shared/`). This simplifies import statements in the Edge Function code.
│       Usage: Used by the Deno runtime when executing functions in `src/backend/functions/` to resolve aliased imports. Referenced by `src/backend/deno.jsonc` (if present) and `supabase/config.toml`.
│   
├── 📁 components/
│   ├── 📄 ChatInterface.tsx
│   │   Purpose: Provides the main chat interface for user-AI interactions
│   │   Details:
│   │   - Handles three interaction modes:
│   │     • Major Edit: For significant changes
│   │     • Minor Edit: For small adjustments
│   │     • Just Ask: For questions without edits
│   │   - Message Features:
│   │     • Renders markdown content
│   │     • Supports clarification workflows
│   │     • Shows suggestion buttons
│   │     • Displays loading states
│   │     • Auto-scrolls to new messages
│   │   - Input Features:
│   │     • Multi-line support (Shift+Enter)
│   │     • Focus management
│   │     • Loading states
│   │     • Placeholder text
│   │   - UI Components:
│   │     • Mode selection buttons
│   │     • Message history area
│   │     • Input area with send button
│   │     • Clarification banner when needed
│   │   Dependencies:
│   │   - UI: Button, Textarea, ScrollArea, ReactMarkdown
│   │   - Icons: Send, Paperclip, Mic, CornerDownLeft, AlertTriangle, Wand2
│   │   - Utils: cn (className utility)
│   │   State Management:
│   │   - Local: Input value, scroll position
│   │   - Props: Messages, clarification state, loading state, mode selection
│   │   Usage: Rendered as the right-hand panel within the main `Editor` page (`src/pages/Editor.tsx`). It receives its state (messages, loading states, mode) and callbacks (message sending, mode changes) from the `EditorContext`.
│   │
│   ├── 📄 EmailHtmlRenderer.tsx
│   │   Purpose: Renders email content in an isolated iframe environment
│   │   Details:
│   │   - Transforms HTML email templates into interactive previews
│   │   - Handles two types of placeholders (images and links)
│   │   - Manages background colors and styling
│   │   - Provides auto-resizing functionality
│   │   - Implements security measures (HTML escaping)
│   │   - Uses ResizeObserver for dynamic content
│   │   Dependencies: React, forwardRef, useEffect, useRef
│   │   Usage: Likely used by the `EmailPreview` component (`src/components/EmailPreview.tsx`) to render the core HTML content within an iframe and process placeholders.
│   │
│   ├── 📄 EmailPreview.tsx
│   │   Purpose: Renders an interactive email preview within an iframe, displaying overlays for pending changes and clickable placeholders.
│   │   Details:
│   │   - Core Functionality:
│   │     • Uses `EmailHtmlRenderer` to display the base HTML content in an iframe.
│   │     • Manages an overlay system on top of the iframe for:
│   │       - Visualizing pending changes (adds/edits) with styled borders.
│   │       - Creating interactive, clickable overlays for image and link placeholders identified from the `semanticTemplate`.
│   │     • Handles coordinate mapping between the iframe and the parent document for accurate overlay positioning, accounting for scroll and iframe boundaries.
│   │   - Props:
│   │     • `currentHtml`: The HTML string to render.
│   │     • `pendingChanges`: Array of pending changes to highlight.
│   │     • `previewMode`: 'light' or 'dark' (applies a CSS filter for dark mode).
│   │     • `previewDevice`: 'desktop' or 'mobile' (adjusts preview width).
│   │     • `semanticTemplate`: The structured email template data used to identify placeholders.
│   │     • `onPlaceholderActivate`: Callback function triggered when a placeholder overlay is clicked, providing element ID, property path, and type.
│   │   - Key Dependencies:
│   │     • `EmailHtmlRenderer` (for iframe rendering and initial placeholder transformation).
│   │     • `isPlaceholder` utility (from `@/features/services/htmlGenerator`).
│   │     • `cn` utility.
│   │     • React hooks (`useEffect`, `useRef`, `useCallback`).
│   │   - Technical Notes:
│   │     • Uses `requestAnimationFrame` (via `waitForPaintCycle`) for smooth overlay updates.
│   │     • Listens to iframe scroll and resize events to keep overlays synchronized.
│   │   Usage: Imported and used by `EmailPreviewPanel` (`src/components/editor/EmailPreviewPanel.tsx`) to display the email content. It receives HTML, template data, and interaction callbacks from the `EditorContext` (via `EmailPreviewPanel`).
│   │
│   ├── 📄 FeaturesSection.tsx
│   │   Purpose: Displays key application features in a responsive grid on the main landing page.
│   │   Details:
│   │   - Content:
│   │     • Hardcoded array of features: "Create", "Automate", "Analyze", each with a description and an Unsplash image URL.
│   │     • Section header: "Powerful Features", "Everything you need to excel at email marketing", and a subtitle.
│   │   - Layout:
│   │     • Responsive grid of feature cards (1 to 3 columns).
│   │     • Each card contains an image (with hover zoom), title, and description.
│   │   - Styling: Uses Tailwind CSS for styling, including hover effects on cards.
│   │   Dependencies: None (React functional component with local data).
│   │   Usage: Rendered on the main landing page (`src/pages/Index.tsx`) as part of the page's marketing content.
│   │
│   ├── 📄 Footer.tsx
│   │   Purpose: Site-wide footer providing navigation and branding
│   │   Details:
│   │   - Content Structure:
│   │     • Organized into 4 navigation categories:
│   │       - Product: Features, pricing, roadmap, guides
│   │       - Company: About, blog, careers, partners
│   │       - Support: Help, docs, contact, status
│   │       - Legal: Privacy, terms, cookies
│   │     • Dynamic copyright year
│   │     • Brand section with logo and tagline
│   │   - Layout:
│   │     • Responsive 3-column grid on XL screens
│   │     • Left column: Brand section
│   │     • Center/Right: Navigation sections (2x2 grid)
│   │   - UI Features:
│   │     • Dark theme (bg-gray-900)
│   │     • Hover effects on navigation links
│   │     • Semantic HTML structure with ARIA labels
│   │   Dependencies:
│   │   - Components: Link from react-router-dom
│   │   - Styling: Tailwind CSS
│   │   State Management:
│   │   - Stateless component
│   │   - Uses static navigation data structure
│   │
│   ├── 📄 HeroSection.tsx
│   │   Purpose: Main hero section for the landing page, capturing initial user email descriptions and guiding them to authentication.
│   │   Details:
│   │   - Content:
│   │     • Headline, subtitle.
│   │     • `Textarea` for user to describe their desired email.
│   │     • "Generate Email" button.
│   │   - Functionality:
│   │     • On "Generate Email" submit:
│   │       - Shows an authentication dialog ("Sign Up" / "Sign In").
│   │       - On auth choice, saves the textarea content to `localStorage` (key: `savedEmailContent`) and navigates to `/signup` or `/login`.
│   │     • Loads `savedEmailContent` from `localStorage` on mount to pre-fill textarea.
│   │   - Styling: Decorative gradient background, Tailwind CSS.
│   │   Dependencies:
│   │   - `ArrowRight` icon (lucide-react).
│   │   - UI Components: `Textarea`, `Button`, `Dialog` (from `./ui/`).
│   │   - `useNavigate` (react-router-dom).
│   │   - React hooks (`useState`, `useEffect`).
│   │   Usage: Rendered as the primary section in `src/pages/Index.tsx`.
│   │
│   ├── 📄 Navbar.tsx
│   │   Purpose: Application's main responsive navigation bar.
│   │   Details:
│   │   - Content & Branding:
│   │     • Displays the brand "monketer" with a `Mail` icon, linking to `/`.
│   │   - Authentication Links:
│   │     • "Sign in" button linking to `/login`.
│   │     • "Sign up" button linking to `/signup`.
│   │   - Responsive Behavior:
│   │     • Desktop: Horizontal layout with visible auth buttons.
│   │     • Mobile: Collapsible hamburger menu which, when opened, shows auth buttons vertically.
│   │   - Styling:
│   │     • Fixed position at the top.
│   │     • Semi-transparent background with a blur effect.
│   │     • Uses Tailwind CSS and "monketer-purple" theme color.
│   │   Dependencies:
│   │   - React (`useState`).
│   │   - `@/components/ui/button`.
│   │   - `Link` from `react-router-dom`.
│   │   - `Mail` icon from `lucide-react`.
│   │   Usage: Rendered at the top of the main landing page (`src/pages/Index.tsx`). Potentially used on other main application pages that require global navigation.
│   │
│   ├── 📄 TestimonialsSection.tsx
│   │   Purpose: Marketing component showcasing customer success stories
│   │   Details:
│   │   - Content Structure:
│   │     • Static testimonials array with customer feedback
│   │     • Each testimonial includes:
│   │       - Unique identifier
│   │       - Customer quote
│   │       - Name and title
│   │       - Company information
│   │   - Layout Design:
│   │     • Responsive grid system (1/2/3 columns)
│   │     • Card-based presentation
│   │     • Centered section header
│   │     • Consistent spacing and alignment
│   │   - Visual Elements:
│   │     • Light purple section background
│   │     • White testimonial cards
│   │     • Gradient avatars with initials
│   │     • Decorative quote marks
│   │     • Subtle shadows and borders
│   │   Dependencies:
│   │   - No external component dependencies
│   │   - Styling: Tailwind CSS
│   │   State Management:
│   │   - Stateless component
│   │   - Uses static testimonial data
│   │   Usage: Rendered on the main landing page (`src/pages/Index.tsx`) to showcase customer feedback.
│   │
│   ├── 📁 editor/
│   │   Purpose: Editor-specific UI components
│   │   Details:
│   │   ├── 📄 EditorHeader.tsx
│   │   │   Purpose: Displays the top navigation bar for the email editor interface.
│   │   │   Details:
│   │   │   - Back Button: Navigates to `/dashboard`.
│   │   │   - Editable Project Title: Allows inline editing of the project title, synced with `EditorContext`.
│   │   │   - Settings Button: Placeholder for future project settings functionality (currently disabled).
│   │   │   - Layout: Sticky header with back (left), title (center), settings (right).
│   │   │   Dependencies: `lucide-react` (ArrowLeft, Settings), `@/components/ui/button`, `react-router-dom` (`useNavigate`), `@/features/contexts/EditorContext` (`useEditor`).
│   │   │   Usage: Rendered as the main header within the `EditorContent` component (`src/pages/Editor.tsx`).
│   │   │
│   │   ├── 📄 EmailPreviewControls.tsx
│   │   │   Purpose: Provides UI controls for the email preview panel, allowing users to toggle display modes.
│   │   │   Details:
│   │   │   - Dark/Light Mode Toggle: Switch with `Sun` and `Moon` icons, controls `isDarkMode` from `EditorContext`.
│   │   │   - Device View Toggle: Switch with `Monitor` and `Smartphone` icons, controls `isMobileView` from `EditorContext`.
│   │   │   - Layout: Sticky, centered controls with adaptive background for dark/light theme. Disabled during loading states.
│   │   │   Dependencies: `lucide-react` (icons), `@/components/ui/switch`, `cn` utility, `useEditor` hook.
│   │   │   Usage: Rendered within `src/components/editor/EmailPreviewPanel.tsx` to provide preview customization options.
│   │   │
│   │   ├── 📄 EmailPreviewPanel.tsx
│   │   │   Purpose: Displays the rendered email preview along with controls.
│   │   │   Details:
│   │   │   - Integrates with `EmailPreview` component for the actual rendering within an iframe and overlay management.
│   │   │   - Provides UI controls for the preview via `EmailPreviewControls` (toggling dark/light mode, mobile/desktop view), shown only when content is available.
│   │   │   - Displays a `PendingChangesBar` to manage proposed modifications.
│   │   │   - Manages the overall layout of the preview area.
│   │   │   - HTML source: Uses `livePreviewHtml` from context if available, otherwise `projectData.current_html`.
│   │   │   - Conditionally renders preview and controls based on loading states and content availability (`projectData.semantic_email_v2`).
│   │   │   - Receives state and callbacks from `EditorContext` (e.g., `livePreviewHtml`, `isDarkMode`, `isMobileView`, `handlePlaceholderActivation`, `pendingChanges`).
│   │   │   - Accepts an optional `fileInputRef` prop (currently for potential future use by child components like `EmailPreview`).
│   │   │   Dependencies:
│   │   │     • `EmailPreview` (from `@/components/EmailPreview`).
│   │   │     • `EmailPreviewControls` (from `./EmailPreviewControls`).
│   │   │     • `PendingChangesBar` (from `./PendingChangesBar`).
│   │   │     • `useEditor` hook.
│   │   │     • `cn` utility.
│   │   │   Usage: Rendered as the left-hand panel within the main `EditorContent` component in `src/pages/Editor.tsx`.
│   │   │
│   │   ├── 📄 InitialPromptScreen.tsx
│   │   │   Purpose: Screen for users to input their initial email generation prompt, shown when starting a new project or if an existing project has no email content.
│   │   │   Details:
│   │   │   - UI Elements:
│   │   │     • `Mail` icon.
│   │   │     • Title and descriptive text.
│   │   │     • Single `Input` field for the prompt with a placeholder.
│   │   │     • "Generate Email with AI" `Button`.
│   │   │   - Functionality:
│   │   │     • Uses `initialInputValue` from `EditorContext` for the input field.
│   │   │     • On submit (button click or Enter), calls `handleSendMessage(prompt, 'major')` from `EditorContext`.
│   │   │     • Shows a validation error if the prompt is empty.
│   │   │   - Dependencies:
│   │   │     • `Mail` icon (lucide-react).
│   │   │     • `Button`, `Input` (from `@/components/ui/`).
│   │   │     • `useEditor` hook (`@/features/contexts/EditorContext`).
│   │   │   State Management:
│   │   │   - Uses `initialInputValue`, `setInitialInputValue`, `handleSendMessage`, `isLoading` from `EditorContext`.
│   │   │   - Local state for validation visibility.
│   │   │   Usage: Rendered conditionally within `EditorContent` in `src/pages/Editor.tsx` when `actualProjectId` is not set (and not loading).
│   │   │
│   │   ├── 📄 LoadingScreen.tsx
│   │   │   Purpose: Displays various loading and transitional states for the editor UI
│   │   │   Details:
│   │   │   - Adaptable: Shows different messages/animations based on a `type` prop (e.g., "loading", "generating", "clarifying").
│   │   │   - Visuals: Typically includes a spinner/animation and text.
│   │   │   - Used during project loading, AI generation, or when AI is clarifying.
│   │   │   Dependencies: UI components (spinner, text), possibly icons.
│   │   │   Usage: Rendered conditionally within `EditorContent`
│   │   │
│   │   ├── 📄 PendingChangesBar.tsx
│   │   │   Purpose: Floating action bar for accepting or rejecting all pending email changes.
│   │   │   Details:
│   │   │   - Visibility: Only shown if there are pending changes.
│   │   │   - Layout: Absolutely positioned at the bottom-center of its parent, styled as a floating bar.
│   │   │   - Controls:
│   │   │     • "Reject All" button (red, `X` icon), calls `handleRejectAll` from context.
│   │   │     • "Accept All" button (green, `Check` icon), calls `handleAcceptAll` from context.
│   │   │   - Both buttons are disabled during loading states.
│   │   │   Dependencies: `lucide-react` (icons), `@/components/ui/button`, `useEditor` hook.
│   │   │   Usage: Rendered within `src/components/editor/EmailPreviewPanel.tsx` to allow bulk actions on pending template modifications.
│   │   │
│   │   └── 📁 ui/
│   │       Purpose: Collection of foundational, reusable UI components (e.g., Button, Input, Dialog, Card, Switch).
│   │       Details: These are typically generic building blocks, often sourced from or inspired by a UI library like shadcn/ui, styled with Tailwind CSS. They ensure a consistent look and feel across the application. Specific props and behaviors follow common UI component patterns. Detailed documentation for each individual primitive is omitted for brevity.
│   │
└── 📁 features/
    Purpose: Business logic by domain
    Details:
    ├── 📁 auth/
    │   Purpose: Handles user authentication and session management using Supabase.
    │   Details: Provides a React Context and a custom hook (`useAuth`) for auth operations.
    │   └── 📄 useAuth.tsx
    │       Purpose: Provides a React Context and custom hook (`useAuth`) for managing user authentication state and interactions with Supabase.
    │       Details:
    │       - Manages `session`, `user`, and `loading` states.
    │       - Synchronizes with Supabase auth events (`onAuthStateChange`, `getSession`).
    │       - Exports `AuthProvider` component to wrap the application or parts of it.
    │       - Exports `useAuth` hook to access:
    │         • `session: Session | null`
    │         • `user: User | null`
    │         • `loading: boolean`
    │         • `signIn(email, password)`: Authenticates a user.
    │         • `signUp(email, password, username)`: Registers a new user (username defaults to email, also attempts to create a `user_info` record).
    │         • `signOut()`: Logs out the user.
    │       - Integrates `useToast` for user feedback on auth operations.
    │       Usage: `AuthProvider` is used in `App.tsx` to provide global auth context. `useAuth` is used by components like `ProtectedRoute`, `RedirectIfAuthenticated`, and pages like `Login.tsx`, `Signup.tsx`, `Dashboard.tsx` to manage auth state and trigger auth actions.
    │
    ├── 📁 contexts/
    │   Purpose: Provides React Context for sharing state across different parts of a feature or the application.
    │   Details: Centralizes state management for complex UI sections like the email editor.
    │   └── 📄 EditorContext.tsx
    │       Purpose: Central React Context (`EditorContext`) and provider (`EditorProvider`) for managing all state and operations of the email editor.
    │       Details:
    │       - Manages comprehensive editor state including:
    │         • Project data (`projectData`, `projectTitle`, `actualProjectId`).
    │         • UI states (`isLoading`, `isLoadingProject`, `isDarkMode`, `isMobileView`, `selectedMode`).
    │         • Content (`chatMessages`, `livePreviewHtml`, `pendingChanges`, `EmailTemplateV2` structure).
    │         • AI clarification flow (`isClarifying`, `clarificationConversation`, `clarificationContext`).
    │         • Placeholder editing (`editingPlaceholder`, `linkInputValue`).
    │       - Initializes editor by fetching or creating project data based on URL parameters and user auth.
    │       - Provides core handler functions for:
    │         • Sending messages to AI for edits, questions, or generation (`handleSendMessage`).
    │         • Managing clarification dialogues with AI.
    │         • Accepting/rejecting pending template changes (`handleAcceptAll`, `handleRejectAll`).
    │         • Updating project title, element properties (links, images).
    │         • Navigating to send preview page.
    │       - Integrates with `projectService`, Supabase client, `HtmlGeneratorV2`, and `useAuth`.
    │       - Exports `useEditor` hook for components to access context.
    │       Usage: `EditorProvider` wraps the main `Editor` page component (`src/pages/Editor.tsx`). `useEditor` is consumed by numerous components within the editor UI (e.g., `ChatInterface`, `EmailPreviewPanel`, `EditorHeader`, etc.) to display data and trigger actions.
    │
    ├── 📁 services/
    │   Purpose: Contains modules that provide specific functionalities, often acting as clients or wrappers for backend services, shared core logic, or complex operations.
    │   Details: These services are typically used by contexts or page components to fetch data, perform actions, and encapsulate business logic.
    │   ├── 📄 differ.ts
    │   │   Purpose: Frontend (browser) adapter for the V2 template diffing service.
│   │   Details:
    │   │   - Adapts the shared `DifferCore` (from `src/shared/services/differ.ts`) for the frontend environment.
    │   │   - Uses the standard `lodash` library.
    │   │   - Exports `DifferV2` class, which instantiates `DifferCore` with lodash.
    │   │   - The core diffing logic is in the shared `DifferCore`.
    │   │   - Re-exports diff-related types from the shared service.
    │   │   Usage: Likely used by `EditorContext` or other frontend services when needing to compute differences between email template versions, for example, to generate `pendingChanges`.
    │   │
    │   ├── 📄 htmlGenerator.ts
    │   │   Purpose: Frontend (browser) adapter for the V2 HTML email generation service, extending `HtmlGeneratorCore`.
│   │   Details:
    │   │   - Adapts `HtmlGeneratorCore` (from `src/shared/services/htmlGenerator.ts`) for the frontend.
    │   │   - Overrides element generation (`generateElementHtml`) specifically for `button` and `image` types to:
    │   │     • Detect placeholder content using an `isPlaceholder` utility.
    │   │     • Render placeholder elements with specific styling and text cues (e.g., "(Link Required)").
    │   │     • Add `data-*` attributes (`data-element-id`, `data-property-path`, `data-placeholder`) to placeholder elements, enabling the visual editor to identify and manage them.
    │   │   - Crucially, its `generateLayoutStyle` helper now correctly maps the semantic `layout.align` property (e.g., 'center') to the CSS `text-align` property for the wrapping table cell (`<td>`), ensuring correct alignment in the preview.
    │   │   - Includes enhanced HTML `<head>` content with more robust CSS resets and email client compatibility meta tags.
    │   │   - Exports `HtmlGeneratorV2` class and a convenience `generateHtml(template)` function.
    │   │   Usage: Used by `EditorContext` to render the live preview of the email template, providing the necessary data attributes for interactive editing of placeholders.
    │   │
    │   ├── 📄 semanticParser.ts
    │   │   Purpose: Frontend (browser/Node.js) adapter for the V2 email HTML semantic parsing service, extending `SemanticParserCore`.
│   │   Details:
    │   │   - Adapts `SemanticParserCore` (from `src/shared/services/semanticParser.ts`) for the frontend.
    │   │   - Uses `JSDOM` to create a DOM from an HTML string for parsing.
    │   │   - Implements the `parse(html)` method to convert HTML into a structured `EmailTemplateV2` object.
    │   │   - Overrides methods for:
    │   │     • Extracting global styles (body styles, content width).
    │   │     • Locating the main email container and parsing sections/elements.
    │   │     • Determining element types, potentially supporting more frontend-specific types (subtext, quote, code, list).
    │   │   - Exports `SemanticParser` class.
    │   │   Usage: Used to convert raw HTML (e.g., from an imported email or a previous version) into the structured `EmailTemplateV2` format that the editor and other services can work with.
    │   │
    │   └── 📄 projectService.ts
    │       Purpose: Handles frontend interactions with Supabase for projects, templates (V1 & V2, including V1 to V2 upgrade logic), chat, and pending changes.
│       Details:
    │       - This service is a key part of the frontend\'s data management. It includes logic for fetching, creating, updating, and deleting project data.
    │       - It also manages email templates, including a crucial V1 to V2 upgrade path which involves client-side HTML generation to prepare V1 templates for the V2 editor.
    │       - **Fetches pending changes correctly using the V2 structure (selecting `id`, `status`, `diff` from `pending_changes` table).**
    │       - It uses the Supabase client for backend communication.
    │       Usage:
    │       - Used throughout the 



└── 📁 pages/
    Purpose: Top-level components representing distinct application pages or views.
    Details: These components are typically mapped to specific routes in the application router (`src/core/App.tsx`). They compose smaller components to build the page UI.
    ├── 📄 Dashboard.tsx
    │   Purpose: Main user dashboard for managing email projects.
    │   Details:
    │   - Fetches and displays a list of user projects using `projectService.getUserProjects` and `projectService.getUsernameFromId`.
    │   - Uses `useState` for projects, loading state, and username.
    │   - Uses `useAuth` for user context and sign out.
    │   - Uses `useToast` for error feedback.
    │   - Renders a table (`@/components/ui/table`) to display project names and last edited dates.
    │   - Provides "Open" links navigating to `/editor/:username/:projectName`.
    │   - Provides a "Create Project" / "New Project" button navigating to `/editor`.
    │   - Handles loading and empty states.
    │   Usage: Routed at `/dashboard` within `App.tsx`, protected by `ProtectedRoute`.
    │
    ├── 📄 Editor.tsx
    │   Purpose: Main entry point and layout component for the email editor interface.
    │   Details:
    │   - Sets up the `EditorProvider` from `@/features/contexts/EditorContext`.
    │   - Renders `EditorContent`, which consumes the context and orchestrates the editor UI.
    │   - `EditorContent` composes `EditorHeader`, `ResizablePanelGroup` containing `EmailPreviewPanel` (or `LoadingScreen` / `InitialPromptScreen`) and `ChatInterface`, and `PlaceholderEditModal`.
    │   - Manages different UI states based on context (loading, prompting, generating, editing).
    │   - Handles file input for image uploads via a `useRef`.
    │   Usage: Routed at `/editor`, `/editor/:projectId`, and `/editor/:username/:projectName` within `App.tsx`, protected by `ProtectedRoute`.
    │
    ├── 📄 Index.tsx
    │   Purpose: Main public landing page for the application.
    │   Details:
    │   - Composes marketing section components: `Navbar`, `HeroSection`, `FeaturesSection`, `TestimonialsSection`, `Footer` (all from `@/components/`).
    │   - Uses a flex column layout to structure the page.
    │   Usage: Routed at `/` within `App.tsx`. Access is conditional based on authentication status via `RedirectIfAuthenticated`.
    │
    ├── 📄 Login.tsx
    │   Purpose: Authentication page for users to sign in.
│   Details:
    │   - Renders a login form with email and password fields (`input`).
    │   - Uses `useState` for form state and loading indicator.
    │   - Calls `signIn` from `useAuth` hook on submission.
    │   - Includes links to signup (`/signup`) and potentially password reset.
    │   - Uses `@/components/ui/button` and `lucide-react` icon.
    │   Usage: Routed at `/login` within `App.tsx`. Access is conditional via `RedirectIfAuthenticated`.
    │
    ├── 📄 NotFound.tsx
    │   Purpose: Displays a 404 error page for non-existent routes.
│   Details:
    │   - Displays a standard "404 Page not found" message.
    │   - Uses `useAuth` to check user authentication status.
    │   - Provides a primary navigation button that links to `/dashboard` (if authenticated) or `/` (if not).
    │   - Conditionally shows a link to `/editor` for authenticated users.
    │   - Uses `useLocation` to log the invalid path.
    │   Usage: Routed as the catch-all (`*`) route in `App.tsx`.
    │
    ├── 📄 PrivacyPolicy.tsx
    │   Purpose: Displays the company's privacy policy.
│   Details:
    │   - Static content page.
    │   - Uses `@/components/ui/container` and `@/components/ui/typography` for layout and styling.
    │   - Displays policy sections (Introduction, Collection, Usage, Security, Rights, Changes, Contact).
    │   - Dynamically sets the "Last updated" date.
    │   Usage: Routed at `/privacy-policy` in `App.tsx`. Publicly accessible.
    │
    ├── 📄 SendEmailPage.tsx
    │   Purpose: Allows users to send a preview of their generated email and copy its HTML.
│   Details:
    │   - Retrieves email HTML from `sessionStorage` ('emailHtmlToSend') on mount. Redirects to `/editor` if not found.
    │   - Provides an input field (`@/components/ui/input`) for the recipient's email address.
    │   - Provides a button to send the preview, which calls the `send-preview-email` Supabase Edge Function.
    │   - Displays the email HTML in a read-only textarea (`@/components/ui/textarea`).
    │   - Provides a button to copy the HTML to the clipboard (`navigator.clipboard.writeText`).
    │   - Uses `useState`, `useEffect`, `useNavigate`, `useToast`.
    │   - Uses `lucide-react` icons (`Loader2`, `Copy`, `Send`, `ArrowLeft`).
    │   Usage: Routed at `/send-email` in `App.tsx`, protected by `ProtectedRoute`. Likely navigated to from the `Editor` page.
    │
    ├── 📄 Signup.tsx
    │   Purpose: User registration page for creating new accounts.
│   Details:
    │   - Renders a signup form with email, password, and terms agreement checkbox.
    │   - Uses `useState` for form state and loading indicator.
    │   - Calls `signUp` from `useAuth` hook on submission. Navigates to `/editor` on success.
    │   - Includes specific error handling for rate limiting (`useToast`).
    │   - Includes links to login (`/login`), terms (`#`), and privacy policy (`#`).
    │   - Uses `@/components/ui/button` and `lucide-react` icon.
    │   Usage: Routed at `/signup` within `App.tsx`. Access is conditional via `RedirectIfAuthenticated`.
    │
    └── 📄 TermsOfService.tsx
        Purpose: Displays the company's terms of service.
        Details:
        - Static content page, similar structure to `PrivacyPolicy.tsx`.
        - Uses `@/components/ui/container` and `@/components/ui/typography`.
        - Displays terms sections (Introduction, Use of Service, Responsibilities, IP, Liability, Changes, Contact).
        - Dynamically sets the "Last updated" date.
        Usage: Routed at `/terms-of-service` in `App.tsx`. Publicly accessible.

    ├── 📄 BlogIndexPage.tsx           # NEW: Main page listing all blog posts.
    │   Purpose: Displays a list of published blog posts with interactive search and category filtering, using a nice UI.
    │   Details: Uses React state (`useState`, `useMemo`) to manage search terms, selected category, and dynamically filtered post list. 
    │            - Renders a prominent, centered search input and a unified dropdown menu for category filtering directly on the page's gradient background (removed the distinct background card).
    │            - Input and filter button have explicit white backgrounds and borders for contrast.
    │            - Displays posts in a responsive grid with enhanced card UI (category badges, author/date, excerpts, "Read More" links).
    │            - Shows a "No Posts Found" message if filters/search yield no results.
    │            - Imports `Input`, `Button`, `DropdownMenu` components from `@/components/ui/` and `Search`, `XCircle`, `ChevronDown`, `Filter` icons from `lucide-react`.
    │            - Includes the standard application `Footer`.
    │   Usage: Routed at `/blog` in `App.tsx`. Publicly accessible.
    │
    └── 📄 BlogPostPage.tsx            # NEW: Page displaying a single blog post.
        Purpose: Fetches and displays the full content of a single blog post based on its slug, using a nice UI.
        Details: Uses `useParams` to get the post slug. Displays placeholder content including title, author, date, header image, and sample article text with various formatting (headings, paragraphs, blockquotes). Styled with Tailwind CSS and `@tailwindcss/typography` for a clean blog post layout. Includes a "Back to Blog" link.
        Usage: Routed at `/blog/:slug` in `App.tsx`. Publicly accessible.

└── 📁 shared/
    Purpose: Code shared between the frontend (React) and backend (Deno/Supabase Edge Functions).
    Details: Contains core services logic, utility functions, and type definitions used across the application.
    ├── 📁 lib/
    │   Purpose: Shared, low-level utility functions.
    │   ├── 📄 uuid-utils.ts
    │   │   Purpose: Shared, canonical utility functions for validating and cleaning UUID strings.
    │   │   Details: Provides `isValidUuid(id)` to check format via regex. Provides `cleanUuid(id)` to sanitize by removing trailing spaces/digits before validation.
    │   │   Usage: Used across frontend/backend for UUID validation/sanitization, replacing previous duplicate implementations.
    │   │
    │   └── 📄 uuid.ts
    │       Purpose: Shared, canonical implementation for generating UUID v4 strings.
    │       Details: Uses `v4 as uuidv4` from the `uuid` npm package. Exports `generateId()`.
    │       Usage: Standard way to generate unique IDs across the application (elements, sections, projects, etc.), replacing previous implementations.
    │
    ├── 📁 services/
    │   Purpose: Core implementation logic for key application services, designed to be adapted for specific environments.
    │   ├── 📄 differ.ts
    │   │   Purpose: Core, shared implementation for comparing two `EmailTemplate` (V2) objects and generating a detailed diff.
    │   │   Details: Contains `DifferCore` class. Requires Lodash instance. Methods `diffTemplates`, `diffSections`, `diffElements`, `diffProperties` compare structures based on IDs and properties, tracking additions, removals, modifications, moves. Returns `TemplateDiffResult`.
    │   │   Usage: Base class for frontend/backend adapters. Used by `generate-email-changes` backend function to compute pending changes.
    │   │
    │   ├── 📄 htmlGenerator.ts
    │   │   Purpose: Core, shared implementation for generating HTML email strings from structured `EmailTemplate` (V2) objects.
    │   │   Details: Contains `HtmlGeneratorCore` class (implements `IHtmlGenerator`). Main `generate` method builds the document. Protected methods (`generateSectionHtml`, `generateElementHtml`, etc.) handle parts of the template. Follows adapter pattern. Includes robust HTML/CSS, resets, and email client compatibility fixes.
    │   │   Usage: Base class for frontend/backend adapters. Core logic for converting `EmailTemplateV2` to HTML.
    │   │
    │   └── 📄 semanticParser.ts
    │       Purpose: Core, shared implementation logic for parsing HTML email strings into structured `EmailTemplate` (V2) objects.
    │       Details: Contains `SemanticParserCore` class (implements `ISemanticParser`). Abstract `parse` method requires adapter implementation. Protected methods (`extractGlobalStyles`, `extractSectionStyles`, `extractElementProperties`, etc.) handle parsing logic. Includes helper utilities.
    │       Usage: Base class for frontend/backend adapters. Enables converting raw HTML into the application's structured `EmailTemplateV2` format.
    │
    └── 📁 types/
        Purpose: Shared TypeScript type definitions and configurations used across the entire application.
        ├── 📁 config/
        │   Purpose: Default configurations for shared entities.
        │   └── 📄 elementDefaults.ts
        │       Purpose: Defines default configurations (styles, layout, properties) for all V2 email element types and provides a factory function.
        │       Details: Exports `elementDefaults` constant mapping `ElementTypeV2` to default objects (using `@@PLACEHOLDER_...@@` markers). Exports `createNewElement(type, initialContent?)` factory function using `generateId` and deep copying defaults.
        │       Usage: Used when creating new elements programmatically (AI/backend) or via UI (editor) to ensure consistency.
        │
        ├── 📄 common.ts
        │   Purpose: Defines common, fundamental TypeScript types shared across the application.
        │   Details: Exports `InteractionMode` union type (`'ask' | 'edit' | 'major'`).
        │   Usage: Provides basic shared types, imported where needed (e.g., `EditorContext`).
        │
        ├── 📄 diffs.ts
        │   Purpose: Defines TypeScript interfaces for representing the results of diffing email templates.
        │   Details: Exports `PropertyChange`, `ElementDiff`, `SectionDiff`, `TemplateDiffResult`. Defines the structure returned by `DifferCore`.
        │   Usage: Used by `DifferCore` service and consumers of diff results (e.g., `EditorContext` for pending changes).
        │
        ├── 📄 editor.ts
        │   Purpose: Defines TypeScript types specific to the editor interface, primarily for chat/messaging.
        │   Details: Exports `ChatMessage` interface (`id`, `project_id`, `role`, `content`, `timestamp`, `isError`).
        │   Usage: Used by frontend components (`ChatInterface`, `EditorContext`) for chat data.
        │
        ├── 📄 elements.ts
        │   Purpose: Defines all TypeScript types related to individual email elements within the V2 template structure.
        │   Details: Exports `ElementType` union. Defines `EmailElementLayout` and specific property interfaces (`HeaderElementProperties`, `ImageElementProperties`, etc.) for all types. Exports the main `EmailElement` discriminated union.
        │   Usage: Foundational types used by services, contexts, validation, and defaults for defining email content elements.
        │
        ├── 📄 blog.ts                     # NEW: Defines types related to blog posts.
        │   Purpose: Defines the frontend TypeScript interface for blog post data.
        │   Details: Exports the `BlogPost` interface, mirroring the structure of the `blog_posts` Supabase table row.
        │   Usage: Used by blog page components (`BlogIndexPage`, `BlogPostPage`) for type safety when handling fetched post data.
        │
        ├── 📄 index.ts
        │   Purpose: Barrel file for the `src/shared/types` directory.
        │   Details: Explicitly re-exports types from `elements.ts`, `sections.ts`, `template.ts`, `validators.ts`, `diffs.ts`, `blog.ts`.
        │   Usage: Provides a single import point (`@shared/types`) for common shared types.
        │
        ├── 📄 pendingChangeTypes.ts
        │   Purpose: Defines TypeScript types for representing proposed template changes awaiting approval.
        │   Details: Exports `PendingChangeInput` (for creation) and `PendingChange` (for stored record, includes metadata).
        │   Usage: Structures data for the pending changes workflow (backend functions, frontend context/UI).
        │
        ├── 📄 sections.ts
        │   Purpose: Defines TypeScript types for email template sections.
        │   Details: Exports `EmailSectionStyles` and `EmailSection` (id, elements array, styles) interfaces.
        │   Usage: Part of the core `EmailTemplateV2` structure, used by services handling template structure.
        │
        ├── 📄 template.ts
        │   Purpose: Defines the top-level TypeScript types for the V2 email template structure.
        │   Details: Exports `EmailGlobalStyles` and the main `EmailTemplate` (id, name, version, sections array, globalStyles) interfaces.
        │   Usage: The central data structure for email content, used extensively by services, contexts, and backend functions.
        │
        └── 📄 validators.ts
            Purpose: Provides Zod schemas and a validation function specifically for the `EmailTemplate` V2 structure.
            Details: Defines comprehensive Zod schemas for all parts of `EmailTemplateV2`, including layouts, element properties, sections, global styles. Uses placeholders. Exports `validateEmailTemplateV2(templateData)` function using `safeParse`. Requires `version: 2`.
            Usage: Ensures data integrity, especially for AI-generated content. Used primarily in backend functions (e.g., `generate-email-changes`) before saving data.

### Database Types (`src/integrations/supabase/types.ts`)

This file, often generated/updated via Supabase CLI (`supabase gen types typescript`), contains the TypeScript definitions for the entire database schema (`Database` type). It ensures type safety when interacting with Supabase tables, views, and functions.

Key parts:
- `Json`: Defines the type for JSON/JSONB columns.
- `Database`: The main type, nesting definitions under `public` schema.
- `Tables`: Contains `Row`, `Insert`, `Update` types for each table (e.g., `projects`, `chat_messages`, `pending_changes`, `user_info`, `blog_posts`).
- `Tables<T>`, `TablesInsert<T>`, `TablesUpdate<T>`: Generic helper types for easier access to table row/insert/update types.

Usage: Imported by services (`projectService.ts`) and components that interact directly with Supabase data to ensure correct data shapes.

## AUTONOMOUS AI BLOG AGENT (PYTHON PROJECT)

📁 ai_blog_agent/
  Purpose: Contains the Python-based autonomous AI agent for blog content generation, research, and an approval workflow via Telegram.
  Details: This project is designed to be run as a standalone Python application. It uses Langchain for LLM orchestration and interacts with various APIs (OpenAI, Perplexity, Telegram, Supabase) to autonomously source news, generate blog content, and manage an interactive approval workflow via Telegram.
  Status: Core functionality for news sourcing, content generation, and Telegram-based approval workflow implemented. Ongoing refinements based on `AIAgentMap`.
  ├── 📄 AIAgentMap
  │   Purpose: Detailed multi-phase roadmap and checklist for the development of the AI blog agent.
  │   Details: Outlines phases from setup, manual trigger, Perplexity integration, Telegram approval, feedback handling, social media promotion, to deployment. Includes key decisions made.
  │   Usage: Primary planning and tracking document for this sub-project.
  ├── 📄 .env
  │   Purpose: Stores sensitive API keys and configuration variables for the AI blog agent.
  │   Details: Contains `OPENAI_API_KEY`, `PERPLEXITY_API_KEY`, `TELEGRAM_BOT_TOKEN`, `TELEGRAM_CHAT_ID`, and potentially Supabase function URLs/keys.
  │   Usage: Loaded by `python-dotenv` in `main.py` to provide credentials to the application. This file is listed in `.gitignore` and should not be committed to version control.
  ├── 📄 config.yaml
  │   Purpose: Main configuration file for the AI blog agent, storing non-sensitive settings, prompts, and parameters.
  │   Details: Includes sections for Perplexity API settings (env var name, query params), OpenAI API settings (env var name, model choices), Telegram Bot settings (env var names), Supabase function details (URL), various prompts for LLM interaction (research, blog post generation, social media snippets), and job management settings (pending jobs file, max iterations).
  │   Usage: Loaded by the agent to configure its behavior and interaction with LLMs and other services.
  ├── 📄 main.py
  │   Purpose: Main orchestrator script for the AI Blog Agent.
  │   Details: Initializes the agent, loads configurations, sets up Telegram bot (handlers, polling). Defines the core asynchronous workflow including fetching news topics, generating blog content (research, writing, formatting), and managing an interactive Telegram-based approval process (publish, delete, rewrite). Manages job context for multi-step interactions.
  │   Usage: The primary entry point to run the AI blog agent (`python3 main.py`).
  ├── 📄 requirements.txt
  │   Purpose: Lists all Python dependencies required for the AI blog agent.
  │   Details: Includes `langchain`, `langchain-openai`, `openai`, `python-dotenv`, `requests`, `PyYAML`, `python-telegram-bot`.
  │   Usage: Used to install dependencies into the virtual environment (`pip install -r requirements.txt`).
  ├── 📁 modules/
  │   Purpose: Contains various service modules, each responsible for a specific part of the agent's functionality.
  │   Details: Follows a modular design to separate concerns.
  │   ├── 📄 __init__.py
  │   │   Purpose: Makes the `modules` directory a Python package.
  │   │   Details: Currently empty.
  │   ├── 📄 job_manager.py
  │   │   Purpose: Manages the state and context of ongoing blog post generation jobs, particularly for asynchronous Telegram interactions.
  │   │   Details: Provides functions (`store_job_context`, `get_job_context`, `pop_job_context`, `clear_job_context`) to handle an in-memory dictionary for storing job details (e.g., current draft data, user choices, next expected action). Supports a default job ID for single pending interaction.
  │   ├── 📄 notification_service.py
  │   │   Purpose: Handles Telegram bot setup and communication.
  │   │   Details: Uses `python-telegram-bot`. Key functions include `create_bot_application` (initializes bot), `register_handlers` (maps commands, messages, callbacks to handler functions in `main.py`), `start_bot_polling`/`stop_bot_polling` (manages bot lifecycle), and `send_telegram_message` (sends formatted messages with optional inline keyboards). Also retrieves Telegram credentials.
  │   ├── 📄 perplexity_service.py
  │   │   Purpose: Interacts with the Perplexity API for news sourcing and uses OpenAI for topic relevance assessment.
  │   │   Details: Implements `fetch_breaking_news_topic` which queries Perplexity for recent news based on configured keywords and then uses an OpenAI model to evaluate relevance and extract a concise blog topic. Loads Perplexity API and relevance check prompts from `config.yaml`.
  │   ├── 📄 research_service.py
  │   │   Purpose: Conducts research on a given topic using an LLM (via Perplexity API direct call).
  │   │   Details: Implements `conduct_research` which takes a topic, queries the Perplexity API (model `llama-3.1-sonar-small-128k-online` by default) with a specific system prompt to gather information, and returns a synthesized research brief. Loads configuration from `config.yaml`.
  │   ├── 📄 supabase_service.py
  │   │   Purpose: Interacts with the Supabase backend for formatting blog post data and posting it.
  │   │   Details: Provides `format_for_supabase` to map generated blog components (title, slug, content, author_id, etc.) to the JSON payload expected by the Supabase Edge Function. Provides `post_blog_to_supabase` to send this payload to the `create-blog-post` Supabase Edge Function. Handles API responses and errors.
  │   └── 📄 writing_service.py
  │       Purpose: Generates various components of a blog post (title, slug, content, excerpt) using LLM calls via Langchain, and can incorporate rewrite instructions.
  │       Details: Implements `generate_blog_post_components` which orchestrates multiple OpenAI calls with specific prompts (from `config.yaml`) for each component. Accepts an initial research brief and optional user feedback for rewrites. Uses Langchain's `ChatOpenAI`.
  └── 📁 venv/
      Purpose: Python virtual environment for the `ai_blog_agent`.
      Details: Contains isolated Python interpreter and installed dependencies. This directory is typically gitignored.