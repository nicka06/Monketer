## SUMMARY MAP

📁 supabase/
  Purpose: Configuration and local development files for Supabase.
  Details: This directory typically holds CLI-generated files, migrations, and project-specific Supabase settings.
  ├── 📄 config.toml
  │   Purpose: Main configuration file for the Supabase CLI, overriding default behaviors and specifying project structure.
  │   Details:
  │   - Defines function-specific settings for `clarify-user-intent`.
  │   - `entrypoint`: Specifies the direct path to the main `index.ts` file for the `clarify-user-intent` function, relative to the `supabase` directory itself (e.g., `../src/backend/functions/clarify-user-intent/index.ts`). This tells the CLI where to find the function code if it's not in the default `supabase/functions` location.
  │   - `import_map`: Specifies the path to the `import_map.json` file used by Deno for this function, also relative to the `supabase` directory (e.g., `../src/backend/functions/import_map.json`). This ensures correct module resolution during bundling and deployment.
  │   - **Also defines similar `entrypoint` and `import_map` settings for the `generate-email-changes` function.**
  │   Usage: Crucial for deploying Edge Functions when they are not located in the default `supabase/functions` directory. Ensures the Supabase CLI can locate the function code and its dependencies correctly.

📁 src/
├── 📁 backend/
│   ├── 📁 functions/
│   │   ├── 📁 stripe-webhook-handler/
│   │   │   ├── 📄 index.ts
│   │   │   │   Purpose: Handles Stripe webhook events for subscription management.
│   │   │   │   Details:
│   │   │   │   - Processes various Stripe events (checkout.session.completed, invoice events, subscription updates).
│   │   │   │   - Updates user subscription status and tier in Supabase database.
│   │   │   │   - Handles subscription lifecycle (creation, updates, cancellation).
│   │   │   │   - Integrates with Stripe API and Supabase client.
│   │   │   │   Usage: Deployed as Supabase Edge Function to handle Stripe webhook notifications.
│   │   │   │
│   │   │   └── 📄 types.ts
│   │   │       Purpose: Type definitions for subscription-related data.
│   │   │       Details:
│   │   │       - Defines `SubscriptionTier` type ('free' | 'pro' | 'premium').
│   │   │       - Defines `SubscriptionPlan` interface.
│   │   │       - Provides utility function `determineTierFromPriceId`.
│   │   │       Usage: Used by webhook handler and other subscription-related components.
│   │   │
│   │   ├── 📁 .temp/  
│   │   │   Purpose: Supabase CLI version tracking or temporary build files for backend.
│   │   │   Details: (Clarify based on actual use)
│   │   │
│   │   ├── 📁 functions/ 
│   │   │   ├── 📁 _shared/
│   │   │   │   Purpose: Contains shared code, types, or utilities used by multiple backend functions.
│   │   │   │   Details: For example, `cors.ts` for CORS headers, `lib/` for more complex shared utilities.
│   │   │   │   Usage: Imported by other functions to reduce code duplication.
│   │   │   │   Files:
│   │   │   │     *   **`cors.ts`**
│   │   │   │         *   Purpose: Provides basic Cross-Origin Resource Sharing (CORS) headers for Deno functions.
│   │   │   │         *   Details: Exports a `corsHeaders` object: `{"Access-Control-Allow-Origin": "*", "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type", "Access-Control-Allow-Methods": "POST, GET, OPTIONS"}`. The wildcard origin is suitable for development but should be more restrictive in production.
│   │   │   │         *   Usage: Imported directly by Deno functions (e.g., `save-email-setup-form`) for simple OPTIONS request handling and adding permissive CORS headers.
│   │   │   │   ├── 📁 lib/
│   │   │   │   │   ├── 📄 constants.ts
│   │   │   │   │   │   Purpose: Manages Cross-Origin Resource Sharing (CORS) configuration for Supabase Edge Functions, ensuring secure API access.
│   │   │   │   │   │   Details:
│   │   │   │   │   │   - Defines a whitelist of `ALLOWED_ORIGINS` for production (monketer.com, www.monketer.com) and common development ports (localhost:3000, localhost:5173, localhost:8080).
│   │   │   │   │   │   - Exports `corsHeadersFactory(requestOrigin)`: A function that dynamically generates appropriate CORS headers. It returns the `requestOrigin` if it's in `ALLOWED_ORIGINS`, otherwise defaults to the primary production origin. This is the recommended method.
│   │   │   │   │   │   - Specifies allowed HTTP headers (authorization, x-client-info, apikey, content-type) and methods (GET, POST, PUT, DELETE, OPTIONS).
│   │   │   │   │   │   - Sets `Access-Control-Max-Age` to `86400` (24 hours) for preflight request caching.
│   │   │   │   │   │   - Includes legacy `corsHeaders` with a wildcard `Access-Control-Allow-Origin: '*'`, which is deprecated but maintained for backward compatibility.
│   │   │   │   │   │   Usage:
│   │   │   │   │   │   - `corsHeadersFactory` is imported and used by multiple Supabase Edge Functions (`clarify-user-intent`, `generate-email-changes`, `manage-pending-changes`, `send-preview-email`) to set response headers for main requests, error responses, and OPTIONS preflight requests.
│   │   │   │   │   │   - The legacy `corsHeaders` is directly used for OPTIONS preflight request handling in `generate-email-changes/index.ts`.
│   │   │   │   │   │
│   │   │   │   │   ├── 📄 uuid-utils.ts
│   │   │   │   │   │   Purpose: Shared, canonical utility functions for validating and cleaning UUID strings.
│   │   │   │   │   │   Details: Provides `isValidUuid(id)` to check format via regex. Provides `cleanUuid(id)` to sanitize by removing trailing spaces/digits before validation.
│   │   │   │   │   │   Usage: Used across frontend/backend for UUID validation/sanitization, replacing previous duplicate implementations.
│   │   │   │   │   │
│   │   │   │   │   └── 📄 uuid.ts
│   │   │   │   │       Purpose: Shared, canonical implementation for generating UUID v4 strings.
│   │   │   │   │       Details: Uses `v4 as uuidv4` imported from a URL (`https://esm.sh/uuid`) for Deno/browser compatibility. A `@ts-ignore` comment is used to suppress a local TypeScript linter error related to resolving types from the URL, as Deno handles this at runtime. Exports `generateId()`.
│   │   │   │   │       Usage: Standard way to generate unique IDs across the application (elements, sections, projects, etc.), replacing previous implementations that might have used direct npm package imports.
│   │   │   │   │
│   │   │   │   └── 📁 services/
│   │   │   │       ├── 📄 differ.ts
│   │   │   │       │   Purpose: Backend-specific adapter for the V2 template diffing service.
│   │   │   │       │   Details:
│   │   │   │       │   - Extends `DifferV2Core` from `src/shared/services/differ.ts`.
│   │   │   │       │   - Currently provides no backend-specific overrides, simply inherits core diffing logic.
│   │   │   │       │   - Exports `DifferV2` class.
│   │   │   │       │   Usage: Used internally by backend functions like `generate-email-changes` and `manage-pending-changes` when V2 diff calculations are needed.
│   │   │   │       │
│   │   │   │       ├── 📄 htmlGenerator.ts
│   │   │   │       │   Purpose: Backend adapter for the V2 HTML email generation service, extending `HtmlGeneratorCore`.
│   │   │   │       │   Details:
│   │   │   │       │   - Adapts `HtmlGeneratorCore` (from `src/shared/services/htmlGenerator.ts`) for the backend Deno environment.
│   │   │   │       │   - Does not override any core methods, simply inherits the HTML generation logic.
│   │   │   │       │   - **This means it includes the functionality from `HtmlGeneratorCore` to add `data-section-id` attributes to section containers, making these IDs available in the HTML stored in the database.**
│   │   │   │       │   - Exports `HtmlGeneratorV2` class and a convenience `generateHtml(template)` function.
│   │   │   │       │   Usage: Used by backend functions like `manage-pending-changes` to generate the final HTML for accepted email templates before saving to the database.
│   │   │   │       │
│   │   │   │       └── 📄 semanticParser.ts 
│   │   │   │           Purpose: Backend adapter for V2 email HTML semantic parsing (if applicable, or if shared and used by backend).
│   │   │   │           Details: (Details would depend on its actual backend use)
│   │   │   │           Usage: (Usage would depend on its actual backend use)
│   │   │   │
│   │   ├── 📁 clarify-user-intent/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: AI conversation middleware, served as a Supabase Edge Function.
│   │   │       Details: (Content as previously listed, summarized for brevity)
│   │   │       - Analyzes user messages, asks clarifying questions, provides structured data for email generation.
│   │   │       - Manages context, token limits, error handling.
│   │   │       Usage: HTTP POST endpoint for frontend, uses OpenAI.
│   │   │
│   │   ├── 📁 generate-email-changes/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Supabase Edge Function to process AI-driven modifications to email templates, convert into granular pending changes, and save.
│   │   │       Details: (Content as previously listed, summarized for brevity)
│   │   │       - Receives payload, constructs OpenAI prompt for complete `EmailTemplateV2` (new or modified).
│   │   │       - Parses AI response, merges with defaults, validates, generates batch ID.
│   │   │       - Calls `convertDiffToGranularRows` to create `GranularPendingChangeInput[]`.
│   │   │       - Saves granular changes to `pending_changes` table.
│   │   │       Usage: Called by frontend after clarification to generate pending changes.
│   │   │
│   │   ├── 📁 manage-pending-changes/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Supabase Edge Function to manage granular pending V2 template changes (accept/reject/get).
│   │   │       Details: (Content as previously listed, summarized for brevity)
│   │   │       - Handles `accept_one`, `reject_one`, `accept_batch`, `reject_batch`, `get_batch`, `get_all_project`.
│   │   │       - Uses `applyPendingChanges` helper to modify `EmailTemplateV2`.
│   │   │       - Regenerates HTML using `HtmlGeneratorV2` on acceptance.
│   │   │       - Updates project's `semantic_email_v2`, `current_html`, and change statuses in DB.
│   │   │       Usage: HTTP POST endpoint for frontend to manage pending changes.
│   │   │
│   │   ├── 📁 send-preview-email/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Supabase Edge Function to send an email with provided HTML content for preview.
│   │   │       Details: (Content as previously listed, summarized for brevity)
│   │   │       - Accepts `recipientEmail` and `emailHtml`.
│   │   │       - Uses `nodemailer` with Gmail SMTP (env var credentials) to send.
│   │   │       Usage: HTTP POST endpoint for frontend to send preview emails.
│   │   │
│   │   ├── 📁 save-email-setup-form/
│   │   │   ├── 📄 index.ts
│   │   │   │   Purpose: Supabase Edge Function to save user's initial email setup information.
│   │   │   │   Details:
│   │   │   │     - Receives form data (business area, goals, scenarios, default sender, domain, sendTimeline).
│   │   │   │     - Authenticates the user.
│   │   │   │     - Validates required fields like domain, defaultFromEmail, defaultFromName.
│   │   │   │     - Upserts data into the `email_setups` table (see "Database Schema" section for table details). Key fields set: user_id, domain, business_area, etc., status "pending_dns_config", send_timeline.
│   │   │   │     - Upserts/deletes `scenario_sender_configs` associated with the `email_setup_id`.
│   │   │   │   Usage: Called by the frontend when the user submits the initial email setup form.
│   │   │   │
│   │   │   └── 📄 types.ts  
│   │   │       Purpose: Defines types and interfaces for save-email-setup-form.
│   │   │       Details: Contains `EmailSetupFormData` and `ScenarioSenderConfig`.
│   │   │       Usage: Used by `save-email-setup-form/index.ts`.
│   │   │
│   │   ├── 📁 initiate-email-setup/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Orchestrates the initial DNS configuration steps for a user's domain. All configurations are manual. Primarily focuses on DKIM setup by calling an external mail server API.
│   │   │       Details:
│   │   │         - Authenticates the user and retrieves the `email_setups` record by ID (see "Database Schema" for table details).
│   │   │         - **Idempotency Check:** If `dkim_public_key` column in `email_setups` table contains a valid Base64 key, it is reused.
│   │   │         - **Calls External Mail Server API:**
│   │   │           - Makes a POST request to `MAIL_SERVER_DKIM_ENDPOINT` (env var) with `{ domain }`. Expects `MAIL_SERVER_API_SECRET` (env var) for Bearer token authentication.
│   │   │           - Expects the mail server to return a JSON response like `{ dnsTxtRecord: "selector._domainkey.domain IN TXT \"v=DKIM1; k=rsa; p=PUBLIC_KEY_BASE64\"" }`.
│   │   │         - **DKIM Public Key Parsing & Validation:**
│   │   │           - Parses the received `dnsTxtRecord` string (using regex) to extract the Base64 public key part (`p=...`).
│   │   │           - Validates the extracted public key for valid Base64 format.
│   │   │         - **DNS Record Generation:**
│   │   │           - Generates required DNS records (MX, SPF TXT, DKIM TXT, DMARC TXT).
│   │   │           - Uses `DEFAULT_MX_VALUE` (env var) or a fallback for the MX record value.
│   │   │           - Uses `DEFAULT_SPF_VALUE` (env var) or a fallback for the SPF record value.
│   │   │           - Uses `DEFAULT_DMARC_VALUE` (env var) or a fallback for the DMARC record value (e.g., `v=DMARC1; p=none; rua=mailto:dmarc-reports@domain.com`).
│   │   │           - Constructs the DKIM TXT record value using the (parsed and validated) public key and a DKIM selector (uses existing `dkim_selector` from DB or defaults to "default"). If parsing/validation/API call fails, a placeholder error value is used in the DKIM DNS record.
│   │   │         - **Database Update:** Updates the `email_setups` record (see "Database Schema" for table details) with fields including:
│   │   │           - `dns_provider_name` (from user input).
│   │   │           - `dns_setup_strategy` (always "manual").
│   │   │           - `dkim_selector` (used or defaulted).
│   │   │           - `dkim_public_key` (the extracted Base64 key, or `null` if provisioning failed).
│   │   │           - `dns_records_to_set` (the generated DNS records).
│   │   │           - `status` (always "awaiting_manual_dns_config").
│   │   │           - `mx_record_value`, `spf_record_value`, `dmarc_record_value` are populated with the actual values used.
│   │   │           - `mx_status`, `spf_status`, `dkim_status`, `dmarc_status`, `overall_dns_status` are initialized to 'pending'.
│   │   │       Input: `{ emailSetupId: string, providerInfo: { name: string, nameservers: string[] } }`
│   │   │       Output: `{ dnsSetupStrategy: "manual", dkimSelector: string, requiredDnsRecords: DnsRecord[], message: string }`
│   │   │       Environment Variables Used: `SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY`, `MAIL_SERVER_DKIM_ENDPOINT`, `MAIL_SERVER_API_SECRET`, `DEFAULT_MX_VALUE`, `DEFAULT_SPF_VALUE`, `DEFAULT_DMARC_VALUE`.
│   │   │
│   │   ├── 📁 verify-dns-records/
│   │   │   └── 📄 index.ts
│   │   │       Purpose: Supabase Edge Function to verify DNS records (MX, SPF, DKIM, DMARC) for a given domain setup.
│   │   │       Details:
│   │   │         - Authenticates the user.
│   │   │         - Accepts an `emailSetupId`.
│   │   │         - Fetches the `email_setups` record to get the domain and expected DNS record values (`mx_record_value`, `spf_record_value`, `dmarc_record_value`, `dkim_public_key`, `dkim_selector`).
│   │   │         - Uses `Deno.resolveDns(recordName, recordType)` to query actual DNS records from public resolvers.
│   │   │         - **MX Check**: Compares the exchange part of resolved MX records against `mx_record_value`.
│   │   │         - **SPF Check**: Looks for a TXT record starting with "v=spf1" that contains the `spf_record_value`.
│   │   │         - **DKIM Check**: Looks for a TXT record at `dkim_selector._domainkey.domain` containing the `p=<dkim_public_key>`.
│   │   │         - **DMARC Check**: Looks for a TXT record at `_dmarc.domain` starting with "v=DMARC1" that contains the `dmarc_record_value`.
│   │   │         - Updates the `email_setups` table with the status for each record (`mx_status`, `spf_status`, `dkim_status`, `dmarc_status` - values: 'verified', 'failed', 'pending', 'error'), the `overall_dns_status`, `last_verification_attempt_at`, and `verification_failure_reason`.
│   │   │         - Returns the detailed verification statuses.
│   │   │       Input: `{ "emailSetupId": "uuid" }`
│   │   │       Output: `{ overallDnsStatus, mxStatus, spfStatus, dkimStatus, dmarcStatus, lastVerificationAttemptAt, verificationFailureReason }` (see function interfaces for `DnsVerificationStatus` details).
│   │   │       Environment Variables Used: `SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY`, `SUPABASE_ANON_KEY`.
│   │   │
│   ├── 📁 supabase-admin-example/  
│   │   └── 📄 index.ts
│   │       Purpose: Example or utility function demonstrating Supabase admin client usage.
│   │       Details: (Content would depend on the specific example)
│   │       Usage: Reference for admin-level operations or a specific utility.
│   │
│   └── 📄 import_map.json 
│       Purpose: Deno import map for backend functions if shared across all, or general backend utilities.
│       Details: Maps module specifiers to URLs for Deno.
│       Usage: Used by Deno runtime to resolve imports for functions not having their own `import_map.json` or for shared backend code.
│
├── 📁 frontend/
│   ├── 📁 components/
│   │   ├── 📄 EmailSetupForm.tsx
│   │   │   Purpose: React component for the email setup onboarding form.
│   │   │   Details:
│   │   │   - Collects user input for business area, goals, scenarios, default sender info, domain.
│   │   │   - Handles form submission, calling the `save-email-setup-form` Supabase function.
│   │   │   - Likely includes state management for form fields and validation.
│   │   │   Usage: Integrated into the onboarding flow pages.
│   │   │
│   │   ├── 📄 DnsConfigurationGuide.tsx
│   │   │   Purpose: React component to display DNS records and guide users on manual configuration.
│   │   │   Details:
│   │   │   - Takes DNS records (MX, SPF, DKIM, DMARC) as props.
│   │   │   - Presents them clearly to the user.
│   │   │   - May include instructions or links to common DNS provider help pages.
│   │   │   Usage: Shown after `initiate-email-setup` returns, as all setups are manual.
│   │   │
│   │   ├── 📄 Navbar.tsx
│   │   │   Purpose: Navigation bar for the application, themed for the jungle look. Handles user authentication status for displaying links.
│   │   │   Details: Provides main site navigation links. Styled with a dark green background, white text, and yellow accents. 
│   │   │     - Imports `useAuth` to get `user` and `signOut` function.
│   │   │     - Conditionally renders a "Sign Out" button if a user is logged in. Clicking it calls `signOut()` and navigates to the homepage.
│   │   │     - If no user is logged in, it displays "Sign in" and "Sign up" links.
│   │   │     - Includes responsive behavior for mobile (hamburger menu) and desktop.
│   │   │   Usage: Used in `Index.tsx` and potentially other authenticated/unauthenticated pages where global navigation is needed.
│   │   │
│   │   ├── 📄 Footer.tsx
│   │   │   Purpose: Site-wide footer component, themed for the jungle look and compacted.
│   │   │   Details:
│   │   │   - Displays centered links for "Privacy Policy" and "Terms of Service".
│   │   │   - Includes the centered text "a westwood innovation" in a smaller font below the links.
│   │   │   - Styled with a dark background and reduced vertical padding.
│   │   │   Usage: Used in `Index.tsx`.
│   │   │
│   │   ├── 📄 OptionalSignUpPage.tsx
│   │   │   Purpose: Provides an optional sign-up point for users. Accessed directly after Index.tsx or after BusinessOverviewPage.tsx if user went back.
│   │   │   Details:
│   │   │   - Jungle theme, full-screen layout.
│   │   │   - Sign up form and "Continue as Guest" option.
│   │   │   - "Previous" button now navigates to `/business-overview`.
│   │   │   - "Sign Up & Save Progress" and "Continue as Guest" both navigate to `/goals-form`.
│   │   │   Usage: Part of the multi-step onboarding flow.
│   │   │
│   │   ├── �� GoalsFormPage.tsx
│   │   │   Purpose: React component for the goals form page in the multi-step onboarding flow.
│   │   │   Details:
│   │   │   - Jungle theme, full-screen layout.
│   │   │   - Displays `pendingBusinessDescription` from `localStorage` (if guest) or fetched `business_description` (if user has one) for context.
│   │   │   - Textarea for users to list goals (one per line).
│   │   │   - **Load Existing Goals (`useEffect`):** Loads from `email_setups` (if signed in) or `localStorage` (if guest).
│   │   │   - **Submit Goals Logic (`handleSubmitGoals`):**
│   │   │     - Processes goals into an array.
│   │   │     - **Signed-in user:** Updates `email_setups` table: `goals`, `goals_form_raw_text`, `form_complete: false`.
│   │   │     - **Guest user:** Saves to `localStorage` (`pendingUserGoals`, `pendingUserGoalsRawText`).
│   │   │     - Handles errors with toasts.
│   │   │   - **Navigation**: Includes "Previous" and "Save Goals & Continue" (Next) buttons. Uses shared `FORM_FLOW_ORDER` from `src/core/constants.ts` to determine navigation paths. Saves data on "Continue".
│   │   │   Usage: Second step in the multi-step onboarding flow, after `OptionalSignUpPage`.
│   │   │
│   │   ├── 📄 BusinessClarificationPage.tsx
│   │   │   Purpose: Placeholder page for business clarification questions, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Step in the multi-step onboarding flow.
│   │   │
│   │   ├── 📄 SelectEmailsPage.tsx
│   │   │   Purpose: Page for users to select or be presented with types of emails to generate.
│   │   │   Details:
│   │   │   - Jungle theme, full-screen layout with image and card.
│   │   │   - Placeholder for email selection checklist.
│   │   │   - **Navigation**: Includes "Previous" and "Next" buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a subsequent step in the onboarding flow.
│   │   │
│   │   ├── 📄 WebsiteStatusPage.tsx
│   │   │   Purpose: Placeholder page to display website status, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a step in the multi-step onboarding flow.
│   │   │
│   │   ├── 📄 InfoClarificationPage.tsx
│   │   │   Purpose: Placeholder page for further information clarification, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a step in the multi-step onboarding flow.
│   │   │
│   │   ├── 📄 DnsConfirmationPage.tsx
│   │   │   Purpose: Placeholder page for DNS confirmation, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a step in the multi-step onboarding flow related to DNS.
│   │   │
│   │   ├── 📄 WebsiteTrackingPage.tsx
│   │   │   Purpose: Placeholder page to display website tracking information, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" ("Finish & View Dashboard") navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as the final step in the multi-step onboarding flow.
│   │   │
│   │   └── 📄 EmailOnboardingPage.tsx
│   │       Purpose: Main page for the email setup onboarding flow.
│   │       Details:
│   │       - Likely orchestrates different steps of the onboarding (e.g., form, DNS config).
│   │       - Uses `EmailSetupContext` and relevant components.
│   │       Usage: Entry point for users setting up their email.
│   │
│   ├── 📁 contexts/
│   │   └── 📄 EmailSetupContext.tsx
│   │       Purpose: React context to manage state related to the email setup process.
│   │       Details:
│   │       - Holds state like `emailSetupId`, form data, DNS records, current step.
│   │       - Provides functions to interact with backend (e.g., save form, initiate DNS setup).
│   │       Usage: Wraps parts of the application involved in email setup.
│   │
│   ├── 📁 pages/
│   │   ├── 📄 Index.tsx
│   │   │   Purpose: Main landing page component for the application.
│   │   │   Details:
│   │   │   - Serves as the entry point for users visiting the root URL.
│   │   │   - Displays a jungle-themed layout (green background) with a themed main navigation bar.
│   │   │   - Content area features a large `<textarea>` for business description input and a monkey image.
│   │   │   - Button "make me an email marketing machine!" initiates the flow.
│   │   │   - **Navigation**: The main button now navigates directly to `/optional-signup`.
│   │   │   - Uses `@/components/Navbar` and `@/components/Footer`.
│   │   │   Usage: Rendered at the root path ('/') for unauthenticated users.
│   │   │
│   │   ├── 📄 BusinessOverviewPage.tsx
│   │   │   Purpose: Allows users to confirm or edit their business description. This page is accessed if a user navigates "Previous" from the Optional Sign Up page.
│   │   │   Details:
│   │   │   - Jungle theme, similar layout to the original Index page (textarea and monkey image).
│   │   │   - Loads `pendingBusinessDescription` from `localStorage` into the textarea on mount.
│   │   │   - "Previous" button navigates to `/` (Index page).
│   │   │   - "Confirm Business Overview & Continue" button saves the `businessDescription` to `localStorage` and navigates to `/optional-signup` (using `FORM_FLOW_ORDER`).
│   │   │   - Uses `@/components/Navbar` and `@/components/Footer`.
│   │   │   Usage: Step in the multi-step onboarding flow, between `/` and `/optional-signup` if user navigates backwards from `/optional-signup`.
│   │   │
│   │   ├── 📄 OptionalSignUpPage.tsx
│   │   │   Purpose: Provides an optional sign-up point for users. Accessed directly after Index.tsx or after BusinessOverviewPage.tsx if user went back.
│   │   │   Details:
│   │   │   - Jungle theme, full-screen layout.
│   │   │   - Sign up form and "Continue as Guest" option.
│   │   │   - "Previous" button now navigates to `/business-overview`.
│   │   │   - "Sign Up & Save Progress" and "Continue as Guest" both navigate to `/goals-form`.
│   │   │   Usage: Part of the multi-step onboarding flow.
│   │   │
│   │   ├── �� GoalsFormPage.tsx
│   │   │   Purpose: React component for the goals form page in the multi-step onboarding flow.
│   │   │   Details:
│   │   │   - Jungle theme, full-screen layout.
│   │   │   - Displays `pendingBusinessDescription` from `localStorage` (if guest) or fetched `business_description` (if user has one) for context.
│   │   │   - Textarea for users to list goals (one per line).
│   │   │   - **Load Existing Goals (`useEffect`):** Loads from `email_setups` (if signed in) or `localStorage` (if guest).
│   │   │   - **Submit Goals Logic (`handleSubmitGoals`):**
│   │   │     - Processes goals into an array.
│   │   │     - **Signed-in user:** Updates `email_setups` table: `goals`, `goals_form_raw_text`, `form_complete: false`.
│   │   │     - **Guest user:** Saves to `localStorage` (`pendingUserGoals`, `pendingUserGoalsRawText`).
│   │   │     - Handles errors with toasts.
│   │   │   - **Navigation**: Includes "Previous" and "Save Goals & Continue" (Next) buttons. Uses shared `FORM_FLOW_ORDER` from `src/core/constants.ts` to determine navigation paths. Saves data on "Continue".
│   │   │   Usage: Second step in the multi-step onboarding flow, after `OptionalSignUpPage`.
│   │   │
│   │   ├── 📄 BusinessClarificationPage.tsx
│   │   │   Purpose: Placeholder page for business clarification questions, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Step in the multi-step onboarding flow.
│   │   │
│   │   ├── 📄 SelectEmailsPage.tsx
│   │   │   Purpose: Page for users to select or be presented with types of emails to generate.
│   │   │   Details:
│   │   │   - Jungle theme, full-screen layout with image and card.
│   │   │   - Placeholder for email selection checklist.
│   │   │   - **Navigation**: Includes "Previous" and "Next" buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a subsequent step in the onboarding flow.
│   │   │
│   │   ├── 📄 WebsiteStatusPage.tsx
│   │   │   Purpose: Placeholder page to display website status, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a step in the multi-step onboarding flow.
│   │   │
│   │   ├── 📄 InfoClarificationPage.tsx
│   │   │   Purpose: Placeholder page for further information clarification, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a step in the multi-step onboarding flow.
│   │   │
│   │   ├── 📄 DnsConfirmationPage.tsx
│   │   │   Purpose: Placeholder page for DNS confirmation, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a step in the multi-step onboarding flow related to DNS.
│   │   │
│   │   ├── 📄 WebsiteTrackingPage.tsx
│   │   │   Purpose: Placeholder page to display website tracking information, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" ("Finish & View Dashboard") navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as the final step in the multi-step onboarding flow.
│   │   │
│   │   └── 📄 EmailOnboardingPage.tsx
│   │       Purpose: Main page for the email setup onboarding flow.
│   │       Details:
│   │       - Likely orchestrates different steps of the onboarding (e.g., form, DNS config).
│   │       - Uses `EmailSetupContext` and relevant components.
│   │       Usage: Entry point for users setting up their email.
│   │
│   ├── 📁 contexts/
│   │   └── 📄 EmailSetupContext.tsx
│   │       Purpose: React context to manage state related to the email setup process.
│   │       Details:
│   │       - Holds state like `emailSetupId`, form data, DNS records, current step.
│   │       - Provides functions to interact with backend (e.g., save form, initiate DNS setup).
│   │       Usage: Wraps parts of the application involved in email setup.
│   │
│   ├── 📁 pages/
│   │   ├── 📄 Index.tsx
│   │   │   Purpose: Main landing page component for the application.
│   │   │   Details:
│   │   │   - Serves as the entry point for users visiting the root URL.
│   │   │   - Displays a jungle-themed layout (green background) with a themed main navigation bar.
│   │   │   - Content area features a large `<textarea>` for business description input and a monkey image.
│   │   │   - Button "make me an email marketing machine!" initiates the flow.
│   │   │   - **Navigation**: The main button now navigates directly to `/optional-signup`.
│   │   │   - Uses `@/components/Navbar` and `@/components/Footer`.
│   │   │   Usage: Rendered at the root path ('/') for unauthenticated users.
│   │   │
│   │   ├── 📄 BusinessOverviewPage.tsx
│   │   │   Purpose: Allows users to confirm or edit their business description. This page is accessed if a user navigates "Previous" from the Optional Sign Up page.
│   │   │   Details:
│   │   │   - Jungle theme, similar layout to the original Index page (textarea and monkey image).
│   │   │   - Loads `pendingBusinessDescription` from `localStorage` into the textarea on mount.
│   │   │   - "Previous" button navigates to `/` (Index page).
│   │   │   - "Confirm Business Overview & Continue" button saves the `businessDescription` to `localStorage` and navigates to `/optional-signup` (using `FORM_FLOW_ORDER`).
│   │   │   - Uses `@/components/Navbar` and `@/components/Footer`.
│   │   │   Usage: Step in the multi-step onboarding flow, between `/` and `/optional-signup` if user navigates backwards from `/optional-signup`.
│   │   │
│   │   ├── 📄 OptionalSignUpPage.tsx
│   │   │   Purpose: Provides an optional sign-up point for users. Accessed directly after Index.tsx or after BusinessOverviewPage.tsx if user went back.
│   │   │   Details:
│   │   │   - Jungle theme, full-screen layout.
│   │   │   - Sign up form and "Continue as Guest" option.
│   │   │   - "Previous" button now navigates to `/business-overview`.
│   │   │   - "Sign Up & Save Progress" and "Continue as Guest" both navigate to `/goals-form`.
│   │   │   Usage: Part of the multi-step onboarding flow.
│   │   │
│   │   ├── �� GoalsFormPage.tsx
│   │   │   Purpose: React component for the goals form page in the multi-step onboarding flow.
│   │   │   Details:
│   │   │   - Jungle theme, full-screen layout.
│   │   │   - Displays `pendingBusinessDescription` from `localStorage` (if guest) or fetched `business_description` (if user has one) for context.
│   │   │   - Textarea for users to list goals (one per line).
│   │   │   - **Load Existing Goals (`useEffect`):** Loads from `email_setups` (if signed in) or `localStorage` (if guest).
│   │   │   - **Submit Goals Logic (`handleSubmitGoals`):**
│   │   │     - Processes goals into an array.
│   │   │     - **Signed-in user:** Updates `email_setups` table: `goals`, `goals_form_raw_text`, `form_complete: false`.
│   │   │     - **Guest user:** Saves to `localStorage` (`pendingUserGoals`, `pendingUserGoalsRawText`).
│   │   │     - Handles errors with toasts.
│   │   │   - **Navigation**: Includes "Previous" and "Save Goals & Continue" (Next) buttons. Uses shared `FORM_FLOW_ORDER` from `src/core/constants.ts` to determine navigation paths. Saves data on "Continue".
│   │   │   Usage: Second step in the multi-step onboarding flow, after `OptionalSignUpPage`.
│   │   │
│   │   ├── 📄 BusinessClarificationPage.tsx
│   │   │   Purpose: Placeholder page for business clarification questions, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Step in the multi-step onboarding flow.
│   │   │
│   │   ├── 📄 SelectEmailsPage.tsx
│   │   │   Purpose: Page for users to select or be presented with types of emails to generate.
│   │   │   Details:
│   │   │   - Jungle theme, full-screen layout with image and card.
│   │   │   - Placeholder for email selection checklist.
│   │   │   - **Navigation**: Includes "Previous" and "Next" buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a subsequent step in the onboarding flow.
│   │   │
│   │   ├── 📄 WebsiteStatusPage.tsx
│   │   │   Purpose: Placeholder page to display website status, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a step in the multi-step onboarding flow.
│   │   │
│   │   ├── 📄 InfoClarificationPage.tsx
│   │   │   Purpose: Placeholder page for further information clarification, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a step in the multi-step onboarding flow.
│   │   │
│   │   ├── 📄 DnsConfirmationPage.tsx
│   │   │   Purpose: Placeholder page for DNS confirmation, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as a step in the multi-step onboarding flow related to DNS.
│   │   │
│   │   ├── 📄 WebsiteTrackingPage.tsx
│   │   │   Purpose: Placeholder page to display website tracking information, part of the multi-step onboarding flow.
│   │   │   Details: Displays a jungle-themed "Under Construction" message. Includes "Previous" and "Next" ("Finish & View Dashboard") navigation buttons using shared `FORM_FLOW_ORDER` from `src/core/constants.ts`.
│   │   │   Usage: Intended as the final step in the multi-step onboarding flow.
│   │   │
│   │   └── 📄 EmailOnboardingPage.tsx
│   │       Purpose: Main page for the email setup onboarding flow.
│   │       Details:
│   │       - Likely orchestrates different steps of the onboarding (e.g., form, DNS config).
│   │       - Uses `EmailSetupContext` and relevant components.
│   │       Usage: Entry point for users setting up their email.
│   │
│   ├── 📁 services/
│   │   └── 📄 api.ts
│   │       Purpose: Frontend API service layer to interact with Supabase functions.
│   │       Details:
│   │       - Contains functions to call `save-email-setup-form` and `initiate-email-setup`.
│   │       - Handles Supabase client initialization, auth headers, error handling.
│   │       Usage: Used by components and context to communicate with the backend.
│   │
│   └── 📄 App.tsx 
│       Purpose: Main application component.
│       Details: Sets up routing, global providers (AuthContext, QueryClientProvider, TooltipProvider). Contains main AppRoutes component which handles conditional navigation based on auth state and form completion status.
│         - `AppRoutes` component:
│           - Initializes `useAuth` to get user and loading state.
│           - `useEffect` hook manages redirection logic:
│             - If `location.state.fromFormFlow` is true, bypasses general redirection for that render cycle, allowing direct inter-page navigation within the form flow.
│             - **Authenticated User Logic (if not `fromFormFlow`):**
│               - Uses a `useRef` flag (`initialRedirectDone`) to ensure the "earliest incomplete step" check runs only once per user session (after login or on initial authenticated load).
│               - Fetches `email_setups` record. The `select()` statement now includes `form_complete`, `business_description`, `goals_form_raw_text`, `selected_emails_data`, `clarification_data`, `website_status_data`, `dns_confirmation_data`, `website_tracking_data`. It's understood that this will cause runtime database errors if these columns do not exist in the `email_setups` table, but the select includes them to align with the full intended form flow data requirements.
│               - **If `emailSetup.form_complete` is `true`:** Redirects to `/dashboard` if user is on any form page *other than* `/`, `/business-overview`, or `/optional-signup`.
│               - **If `emailSetup.form_complete` is `false` (and `initialRedirectDone` is false):**
│                 - Determines the earliest incomplete step by checking for data presence in sequence based on `FORM_FLOW_ORDER`: `business_description` (checked effectively by presence on `/` or `/business-overview`), then `goals_form_raw_text`, then `selected_emails_data`, `website_status_data`, `clarification_data`, `dns_confirmation_data`, `website_tracking_data`.
│                 - If an incomplete step is found and the user is not currently on that step's page, navigates them to that page and sets `initialRedirectDone` to `true`.
│                 - If user is already on the target page, or if all checks pass, sets `initialRedirectDone` to `true`.
│               - **If no `emailSetup` record exists for an authenticated user (and `initialRedirectDone` is false):** Redirects to `/` (unless already on `/`, `/business-overview`, or `/optional-signup`) and sets `initialRedirectDone` to `true`.
│             - **Unauthenticated User Logic:** Redirects from most form pages to `/` or `/login`. `/`, `/business-overview`, and `/optional-signup` remain accessible. Resets `initialRedirectDone` to `false`.
│           - Root route `/` renders `Index` component.
│           - Other routes include `/login`, `/signup`, `/dashboard` (protected), and all form flow pages including the new `/business-overview`.
│       Usage: Root of the React application, orchestrates page rendering and implements the primary form flow resumption logic, focusing initial redirection on login/session start.
│
├── 📁 shared/
│   ├── 📁 types/
│   │   ├── 📄 emailSetupTypes.ts 
│   │   │   Purpose: Shared type definitions for data structures used by both frontend and backend for email setup.
│   │   │   Details:
│   │   │   - `EmailSetupFormData` (if an identical structure is used, or a base type)
│   │   │   - `ProviderInfo`
│   │   │   - `DnsRecord`
│   │   │   - `InitiateEmailSetupRequest` (or its parts if constructed on frontend)
│   │   │   - `InitiateEmailSetupResponse` (or its parts)
│   │   │   Usage: Imported by frontend components/services and backend Supabase functions.
│   │   │
│   │   ├── 📄 pendingChangeTypes.ts
│   │   │   Purpose: Defines types related to granular pending changes for V2 email templates.
│   │   │   Details: Includes `GranularPendingChange`, `GranularPendingChangeInput`, `ChangeOperation`, `ChangeScope`, etc.
│   │   │   Usage: Used by `generate-email-changes` and `manage-pending-changes` functions, and potentially by frontend components that display or interact with these changes.
│   │   │
│   │   └── 📄 templateV2Types.ts
│   │       Purpose: Defines the core structure of V2 email templates.
│   │       Details: Includes `EmailTemplateV2`, `SectionV2`, `ElementV2`, and related style/property types. Uses Zod for validation.
│   │       Usage: Central type definition used by all services and functions that create, parse, modify, or render V2 email templates.
│   │
│   └── 📁 services/
│       ├── 📄 differ.ts (Shared Core)
│       │   Purpose: Core logic for diffing V2 email templates.
│       │   Details: Provides `DifferV2Core` class with methods to compare two `EmailTemplateV2` objects and identify differences.
│       │   Usage: Extended by backend-specific (`src/backend/functions/_shared/services/differ.ts`) and potentially frontend-specific adapters.
│       │
│       ├── 📄 htmlGenerator.ts (Shared Core)
│       │   Purpose: Core logic for generating HTML from V2 email templates.
│       │   Details: Provides `HtmlGeneratorCore` class with methods to convert an `EmailTemplateV2` object into an HTML string. Adds `data-section-id` attributes.
│       │   Usage: Extended by backend-specific (`src/backend/functions/_shared/services/htmlGenerator.ts`) and potentially frontend-specific adapters.
│       │
│       └── 📄 semanticParser.ts (Shared Core)
│           Purpose: Core logic for parsing HTML into a V2 email template structure.
│           Details: Provides `SemanticParserCore` class, defining the interface and shared utilities for converting HTML into `EmailTemplateV2`.
│           Usage: Extended by frontend-specific (`src/frontend/services/semanticParser.ts` - if it exists) and potentially backend adapters.
│
└── 📄 .env.example
    Purpose: Example environment variables file.
    Details: Lists required environment variables for the project (Supabase URL/keys, API keys, etc.) with placeholder values.
    Usage: Users copy this to `.env` and fill in their actual credentials.

---
**Notes on Structure:**
- The sitemap had some duplicate entries or unclear nesting for `src/backend/.temp/` and `src/backend/functions/`. I've tried to rationalize this into a single main `src/backend/functions/` path for the Edge Functions.
- The `semanticParser.ts` under `src/backend/functions/_shared/services/` was noted as a "Frontend adapter" in the original read. I've kept it there but added a note. If it's purely for frontend, it should be in `src/frontend/services/`. If it's a shared core or a backend adapter, its description should reflect that. The one under `src/shared/services/` is correctly labeled as "Shared Core".
- Added placeholder entries for typical frontend files and a shared `emailSetupTypes.ts` based on the project's needs. These would need to be confirmed or created.
---

📄 dns-provider-instructions.ts
   Purpose: Stores structured DNS setup instructions for various common DNS providers.
   Details:
     - Exports `DNS_PROVIDER_INSTRUCTIONS`: An array of `ProviderInstruction` objects.
     - Each `ProviderInstruction` contains:
       - `id`: Normalized string identifier (e.g., "cloudflare", "godaddy").
       - `displayName`: User-friendly provider name.
       - `logoUrl` (optional): Path/URL to a provider logo.
       - `dnsManagementUrl` (optional): Direct link to the provider's DNS management page.
       - `generalNotes` (optional): Array of general tips for the provider.
       - `instructionSteps`: Array of `ProviderInstructionStep` objects (title, description, optional link).
       - `uiFieldNames` (optional): Object mapping generic DNS field names (host, value, etc.) to provider-specific UI labels (e.g., "Name", "Content").
       - `recordSpecificTips` (optional): Object with tips for MX, TXT, SPF, DKIM, DMARC records.
     - Includes example data for Cloudflare, GoDaddy, and a generic "unknown" provider fallback.
     - Exports `getInstructionsForProvider(providerName)`: A helper function that takes a provider name string, normalizes it, and returns the corresponding `ProviderInstruction` object or the "unknown" provider instructions if not found.
   Usage: Intended to be imported by frontend components (e.g., a new DNS setup instructions page) to display tailored guidance to users based on their detected or selected DNS provider.

## Database Schema

This section outlines the structure of key tables in the Supabase PostgreSQL database.

### ሠ Table: `email_setups`
Purpose: Stores information related to a user's email domain setup process. This includes initial configuration, DNS settings, and verification status.
Details:
  - `id`: `uuid` (Primary Key) - Unique identifier for the email setup record.
  - `user_id`: `uuid` (Foreign Key to `auth.users`) - The user who initiated this setup.
  - `domain`: `text` - The domain name the user is setting up (e.g., "example.com").
  - `business_area`: `text` - User-provided business area.
  - `business_subcategory`: `text` - User-provided business subcategory.
  - `goals`: `TEXT[]` (Array of text) - User-selected goals for using the email service.
  - `send_timeline`: `text` - User-indicated timeline for starting to send emails.
  - `dns_provider_name`: `text` - Name of the DNS provider (e.g., "Cloudflare", "GoDaddy").
  - `dns_setup_strategy`: `text` - The strategy for DNS setup (e.g., "manual", "automated"). Currently always "manual".
  - `default_from_name`: `text` - Default "From" name for emails sent from this domain.
  - `default_from_email`: `text` - Default "From" email address (e.g., "contact@example.com").
  - `email_scenarios`: `TEXT[]` (Array of text) - User-selected email scenarios.
  - `status`: `text` - General status of the email setup process (e.g., "pending_dns_config", "active", "error").
  - `dns_records_to_set`: `jsonb` - JSON object containing the DNS records the user needs to set (e.g., MX, SPF, DKIM, DMARC with host, type, value).
  - `provider_api_credentials_status`: `text` - Status related to DNS provider API credential validation (if applicable).
  - `error_message`: `text` - Stores any error message related to the setup process.
  - `created_at`: `timestamp with time zone` - Timestamp of creation.
  - `updated_at`: `timestamp with time zone` - Timestamp of last update.
  - **Existing DNS/DKIM Fields:**
    - `dkim_selector`: `text` - The DKIM selector used (e.g., "default").
    - `dkim_public_key`: `text` - The public part of the DKIM key (Base64 encoded).
  - **New Fields for DNS Record Values & Verification (Phase 1 Plan):**
    - `mx_record_value`: `TEXT` - Expected MX record value (e.g., "mx.yourmailserver.com").
    - `spf_record_value`: `TEXT` - Expected SPF record value (e.g., "v=spf1 include:yourmailserver.com ~all").
    - `dmarc_record_value`: `TEXT` - Expected DMARC record value (e.g., "v=DMARC1; p=none; rua=mailto:dmarc-reports@yourdomain.com").
    - `mx_status`: `TEXT` - Verification status for MX record (e.g., 'pending', 'verified', 'failed'). Default: 'pending'.
    - `spf_status`: `TEXT` - Verification status for SPF record. Default: 'pending'.
    - `dkim_status`: `TEXT` - Verification status for DKIM record. Default: 'pending'.
    - `dmarc_status`: `TEXT` - Verification status for DMARC record. Default: 'pending'.
    - `overall_dns_status`: `TEXT` - Overall DNS verification status (e.g., 'pending', 'partially_verified', 'verified', 'failed_to_verify'). Default: 'pending'.
    - `last_verification_attempt_at`: `TIMESTAMPTZ` - Timestamp of the last DNS verification attempt.
    - `verification_failure_reason`: `TEXT` - Stores any error message if the overall verification process fails.
Usage:
  - Read and written by `save-email-setup-form` to store initial data.
  - Read and updated by `initiate-email-setup` to store generated DNS records, DKIM key, and initialize verification statuses.
  - Will be read and updated by the new `verify-dns-records` function to check and store DNS verification statuses.
  - Read by frontend components to display setup progress and DNS instructions.
## PROJECT STRUCTURE MAP
